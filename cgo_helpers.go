// WARNING: This file has automatically been generated on Wed, 29 Dec 2021 19:01:05 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package gofaiss

/*
#cgo pkg-config: faiss
#include "faiss.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *FaissParameterRange) Ref() *C.FaissParameterRange {
	if x == nil {
		return nil
	}
	return (*C.FaissParameterRange)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissParameterRange) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissParameterRangeRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissParameterRangeRef(ref unsafe.Pointer) *FaissParameterRange {
	return (*FaissParameterRange)(ref)
}

// NewFaissParameterRange allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissParameterRange() *FaissParameterRange {
	return (*FaissParameterRange)(allocFaissParameterRangeMemory(1))
}

// allocFaissParameterRangeMemory allocates memory for type C.FaissParameterRange in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissParameterRangeMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissParameterRangeValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissParameterRangeValue = unsafe.Sizeof([1]C.FaissParameterRange{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissParameterRange) PassRef() *C.FaissParameterRange {
	if x == nil {
		x = (*FaissParameterRange)(allocFaissParameterRangeMemory(1))
	}
	return (*C.FaissParameterRange)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissParameterSpace) Ref() *C.FaissParameterSpace {
	if x == nil {
		return nil
	}
	return (*C.FaissParameterSpace)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissParameterSpace) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissParameterSpaceRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissParameterSpaceRef(ref unsafe.Pointer) *FaissParameterSpace {
	return (*FaissParameterSpace)(ref)
}

// NewFaissParameterSpace allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissParameterSpace() *FaissParameterSpace {
	return (*FaissParameterSpace)(allocFaissParameterSpaceMemory(1))
}

// allocFaissParameterSpaceMemory allocates memory for type C.FaissParameterSpace in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissParameterSpaceMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissParameterSpaceValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissParameterSpaceValue = unsafe.Sizeof([1]C.FaissParameterSpace{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissParameterSpace) PassRef() *C.FaissParameterSpace {
	if x == nil {
		x = (*FaissParameterSpace)(allocFaissParameterSpaceMemory(1))
	}
	return (*C.FaissParameterSpace)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissRangeSearchResult) Ref() *C.FaissRangeSearchResult {
	if x == nil {
		return nil
	}
	return (*C.FaissRangeSearchResult)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissRangeSearchResult) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissRangeSearchResultRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissRangeSearchResultRef(ref unsafe.Pointer) *FaissRangeSearchResult {
	return (*FaissRangeSearchResult)(ref)
}

// NewFaissRangeSearchResult allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissRangeSearchResult() *FaissRangeSearchResult {
	return (*FaissRangeSearchResult)(allocFaissRangeSearchResultMemory(1))
}

// allocFaissRangeSearchResultMemory allocates memory for type C.FaissRangeSearchResult in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissRangeSearchResultMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissRangeSearchResultValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissRangeSearchResultValue = unsafe.Sizeof([1]C.FaissRangeSearchResult{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissRangeSearchResult) PassRef() *C.FaissRangeSearchResult {
	if x == nil {
		x = (*FaissRangeSearchResult)(allocFaissRangeSearchResultMemory(1))
	}
	return (*C.FaissRangeSearchResult)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIDSelector) Ref() *C.FaissIDSelector {
	if x == nil {
		return nil
	}
	return (*C.FaissIDSelector)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIDSelector) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIDSelectorRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIDSelectorRef(ref unsafe.Pointer) *FaissIDSelector {
	return (*FaissIDSelector)(ref)
}

// NewFaissIDSelector allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIDSelector() *FaissIDSelector {
	return (*FaissIDSelector)(allocFaissIDSelectorMemory(1))
}

// allocFaissIDSelectorMemory allocates memory for type C.FaissIDSelector in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIDSelectorMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIDSelectorValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIDSelectorValue = unsafe.Sizeof([1]C.FaissIDSelector{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIDSelector) PassRef() *C.FaissIDSelector {
	if x == nil {
		x = (*FaissIDSelector)(allocFaissIDSelectorMemory(1))
	}
	return (*C.FaissIDSelector)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndex) Ref() *C.FaissIndex {
	if x == nil {
		return nil
	}
	return (*C.FaissIndex)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndex) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexRef(ref unsafe.Pointer) *FaissIndex {
	return (*FaissIndex)(ref)
}

// NewFaissIndex allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndex() *FaissIndex {
	return (*FaissIndex)(allocFaissIndexMemory(1))
}

// allocFaissIndexMemory allocates memory for type C.FaissIndex in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexValue = unsafe.Sizeof([1]C.FaissIndex{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndex) PassRef() *C.FaissIndex {
	if x == nil {
		x = (*FaissIndex)(allocFaissIndexMemory(1))
	}
	return (*C.FaissIndex)(unsafe.Pointer(x))
}

// allocFaissClusteringParametersMemory allocates memory for type C.FaissClusteringParameters in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissClusteringParametersMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissClusteringParametersValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissClusteringParametersValue = unsafe.Sizeof([1]C.FaissClusteringParameters{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *FaissClusteringParameters) Ref() *C.FaissClusteringParameters {
	if x == nil {
		return nil
	}
	return x.ref9c9731c3
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *FaissClusteringParameters) Free() {
	if x != nil && x.allocs9c9731c3 != nil {
		x.allocs9c9731c3.(*cgoAllocMap).Free()
		x.ref9c9731c3 = nil
	}
}

// NewFaissClusteringParametersRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFaissClusteringParametersRef(ref unsafe.Pointer) *FaissClusteringParameters {
	if ref == nil {
		return nil
	}
	obj := new(FaissClusteringParameters)
	obj.ref9c9731c3 = (*C.FaissClusteringParameters)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *FaissClusteringParameters) PassRef() (*C.FaissClusteringParameters, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref9c9731c3 != nil {
		return x.ref9c9731c3, nil
	}
	mem9c9731c3 := allocFaissClusteringParametersMemory(1)
	ref9c9731c3 := (*C.FaissClusteringParameters)(mem9c9731c3)
	allocs9c9731c3 := new(cgoAllocMap)
	allocs9c9731c3.Add(mem9c9731c3)

	var cniter_allocs *cgoAllocMap
	ref9c9731c3.niter, cniter_allocs = (C.int)(x.Niter), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cniter_allocs)

	var cnredo_allocs *cgoAllocMap
	ref9c9731c3.nredo, cnredo_allocs = (C.int)(x.Nredo), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cnredo_allocs)

	var cverbose_allocs *cgoAllocMap
	ref9c9731c3.verbose, cverbose_allocs = (C.int)(x.Verbose), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cverbose_allocs)

	var cspherical_allocs *cgoAllocMap
	ref9c9731c3.spherical, cspherical_allocs = (C.int)(x.Spherical), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cspherical_allocs)

	var cint_centroids_allocs *cgoAllocMap
	ref9c9731c3.int_centroids, cint_centroids_allocs = (C.int)(x.IntCentroids), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cint_centroids_allocs)

	var cupdate_index_allocs *cgoAllocMap
	ref9c9731c3.update_index, cupdate_index_allocs = (C.int)(x.UpdateIndex), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cupdate_index_allocs)

	var cfrozen_centroids_allocs *cgoAllocMap
	ref9c9731c3.frozen_centroids, cfrozen_centroids_allocs = (C.int)(x.FrozenCentroids), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cfrozen_centroids_allocs)

	var cmin_points_per_centroid_allocs *cgoAllocMap
	ref9c9731c3.min_points_per_centroid, cmin_points_per_centroid_allocs = (C.int)(x.MinPointsPerCentroid), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cmin_points_per_centroid_allocs)

	var cmax_points_per_centroid_allocs *cgoAllocMap
	ref9c9731c3.max_points_per_centroid, cmax_points_per_centroid_allocs = (C.int)(x.MaxPointsPerCentroid), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cmax_points_per_centroid_allocs)

	var cseed_allocs *cgoAllocMap
	ref9c9731c3.seed, cseed_allocs = (C.int)(x.Seed), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cseed_allocs)

	var cdecode_block_size_allocs *cgoAllocMap
	ref9c9731c3.decode_block_size, cdecode_block_size_allocs = (C.size_t)(x.DecodeBlockSize), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cdecode_block_size_allocs)

	x.ref9c9731c3 = ref9c9731c3
	x.allocs9c9731c3 = allocs9c9731c3
	return ref9c9731c3, allocs9c9731c3

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x FaissClusteringParameters) PassValue() (C.FaissClusteringParameters, *cgoAllocMap) {
	if x.ref9c9731c3 != nil {
		return *x.ref9c9731c3, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *FaissClusteringParameters) Deref() {
	if x.ref9c9731c3 == nil {
		return
	}
	x.Niter = (int32)(x.ref9c9731c3.niter)
	x.Nredo = (int32)(x.ref9c9731c3.nredo)
	x.Verbose = (int32)(x.ref9c9731c3.verbose)
	x.Spherical = (int32)(x.ref9c9731c3.spherical)
	x.IntCentroids = (int32)(x.ref9c9731c3.int_centroids)
	x.UpdateIndex = (int32)(x.ref9c9731c3.update_index)
	x.FrozenCentroids = (int32)(x.ref9c9731c3.frozen_centroids)
	x.MinPointsPerCentroid = (int32)(x.ref9c9731c3.min_points_per_centroid)
	x.MaxPointsPerCentroid = (int32)(x.ref9c9731c3.max_points_per_centroid)
	x.Seed = (int32)(x.ref9c9731c3.seed)
	x.DecodeBlockSize = (uint32)(x.ref9c9731c3.decode_block_size)
}

// Ref returns a reference to C object as it is.
func (x *FaissClustering) Ref() *C.FaissClustering {
	if x == nil {
		return nil
	}
	return (*C.FaissClustering)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissClustering) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissClusteringRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissClusteringRef(ref unsafe.Pointer) *FaissClustering {
	return (*FaissClustering)(ref)
}

// NewFaissClustering allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissClustering() *FaissClustering {
	return (*FaissClustering)(allocFaissClusteringMemory(1))
}

// allocFaissClusteringMemory allocates memory for type C.FaissClustering in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissClusteringMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissClusteringValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissClusteringValue = unsafe.Sizeof([1]C.FaissClustering{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissClustering) PassRef() *C.FaissClustering {
	if x == nil {
		x = (*FaissClustering)(allocFaissClusteringMemory(1))
	}
	return (*C.FaissClustering)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissClusteringIterationStats) Ref() *C.FaissClusteringIterationStats {
	if x == nil {
		return nil
	}
	return (*C.FaissClusteringIterationStats)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissClusteringIterationStats) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissClusteringIterationStatsRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissClusteringIterationStatsRef(ref unsafe.Pointer) *FaissClusteringIterationStats {
	return (*FaissClusteringIterationStats)(ref)
}

// NewFaissClusteringIterationStats allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissClusteringIterationStats() *FaissClusteringIterationStats {
	return (*FaissClusteringIterationStats)(allocFaissClusteringIterationStatsMemory(1))
}

// allocFaissClusteringIterationStatsMemory allocates memory for type C.FaissClusteringIterationStats in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissClusteringIterationStatsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissClusteringIterationStatsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissClusteringIterationStatsValue = unsafe.Sizeof([1]C.FaissClusteringIterationStats{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissClusteringIterationStats) PassRef() *C.FaissClusteringIterationStats {
	if x == nil {
		x = (*FaissClusteringIterationStats)(allocFaissClusteringIterationStatsMemory(1))
	}
	return (*C.FaissClusteringIterationStats)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexFlat) Ref() *C.FaissIndexFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexFlat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexFlatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexFlatRef(ref unsafe.Pointer) *FaissIndexFlat {
	return (*FaissIndexFlat)(ref)
}

// NewFaissIndexFlat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexFlat() *FaissIndexFlat {
	return (*FaissIndexFlat)(allocFaissIndexFlatMemory(1))
}

// allocFaissIndexFlatMemory allocates memory for type C.FaissIndexFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexFlatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexFlatValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexFlatValue = unsafe.Sizeof([1]C.FaissIndexFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexFlat) PassRef() *C.FaissIndexFlat {
	if x == nil {
		x = (*FaissIndexFlat)(allocFaissIndexFlatMemory(1))
	}
	return (*C.FaissIndexFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexFlatIP) Ref() *C.FaissIndexFlatIP {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlatIP)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexFlatIP) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexFlatIPRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexFlatIPRef(ref unsafe.Pointer) *FaissIndexFlatIP {
	return (*FaissIndexFlatIP)(ref)
}

// NewFaissIndexFlatIP allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexFlatIP() *FaissIndexFlatIP {
	return (*FaissIndexFlatIP)(allocFaissIndexFlatIPMemory(1))
}

// allocFaissIndexFlatIPMemory allocates memory for type C.FaissIndexFlatIP in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexFlatIPMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexFlatIPValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexFlatIPValue = unsafe.Sizeof([1]C.FaissIndexFlatIP{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexFlatIP) PassRef() *C.FaissIndexFlatIP {
	if x == nil {
		x = (*FaissIndexFlatIP)(allocFaissIndexFlatIPMemory(1))
	}
	return (*C.FaissIndexFlatIP)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexFlatL2) Ref() *C.FaissIndexFlatL2 {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlatL2)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexFlatL2) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexFlatL2Ref converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexFlatL2Ref(ref unsafe.Pointer) *FaissIndexFlatL2 {
	return (*FaissIndexFlatL2)(ref)
}

// NewFaissIndexFlatL2 allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexFlatL2() *FaissIndexFlatL2 {
	return (*FaissIndexFlatL2)(allocFaissIndexFlatL2Memory(1))
}

// allocFaissIndexFlatL2Memory allocates memory for type C.FaissIndexFlatL2 in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexFlatL2Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexFlatL2Value))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexFlatL2Value = unsafe.Sizeof([1]C.FaissIndexFlatL2{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexFlatL2) PassRef() *C.FaissIndexFlatL2 {
	if x == nil {
		x = (*FaissIndexFlatL2)(allocFaissIndexFlatL2Memory(1))
	}
	return (*C.FaissIndexFlatL2)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexRefineFlat) Ref() *C.FaissIndexRefineFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexRefineFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexRefineFlat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexRefineFlatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexRefineFlatRef(ref unsafe.Pointer) *FaissIndexRefineFlat {
	return (*FaissIndexRefineFlat)(ref)
}

// NewFaissIndexRefineFlat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexRefineFlat() *FaissIndexRefineFlat {
	return (*FaissIndexRefineFlat)(allocFaissIndexRefineFlatMemory(1))
}

// allocFaissIndexRefineFlatMemory allocates memory for type C.FaissIndexRefineFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexRefineFlatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexRefineFlatValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexRefineFlatValue = unsafe.Sizeof([1]C.FaissIndexRefineFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexRefineFlat) PassRef() *C.FaissIndexRefineFlat {
	if x == nil {
		x = (*FaissIndexRefineFlat)(allocFaissIndexRefineFlatMemory(1))
	}
	return (*C.FaissIndexRefineFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexFlat1D) Ref() *C.FaissIndexFlat1D {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlat1D)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexFlat1D) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexFlat1DRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexFlat1DRef(ref unsafe.Pointer) *FaissIndexFlat1D {
	return (*FaissIndexFlat1D)(ref)
}

// NewFaissIndexFlat1D allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexFlat1D() *FaissIndexFlat1D {
	return (*FaissIndexFlat1D)(allocFaissIndexFlat1DMemory(1))
}

// allocFaissIndexFlat1DMemory allocates memory for type C.FaissIndexFlat1D in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexFlat1DMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexFlat1DValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexFlat1DValue = unsafe.Sizeof([1]C.FaissIndexFlat1D{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexFlat1D) PassRef() *C.FaissIndexFlat1D {
	if x == nil {
		x = (*FaissIndexFlat1D)(allocFaissIndexFlat1DMemory(1))
	}
	return (*C.FaissIndexFlat1D)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexIVFFlat) Ref() *C.FaissIndexIVFFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIVFFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexIVFFlat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexIVFFlatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexIVFFlatRef(ref unsafe.Pointer) *FaissIndexIVFFlat {
	return (*FaissIndexIVFFlat)(ref)
}

// NewFaissIndexIVFFlat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexIVFFlat() *FaissIndexIVFFlat {
	return (*FaissIndexIVFFlat)(allocFaissIndexIVFFlatMemory(1))
}

// allocFaissIndexIVFFlatMemory allocates memory for type C.FaissIndexIVFFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIVFFlatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIVFFlatValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIVFFlatValue = unsafe.Sizeof([1]C.FaissIndexIVFFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexIVFFlat) PassRef() *C.FaissIndexIVFFlat {
	if x == nil {
		x = (*FaissIndexIVFFlat)(allocFaissIndexIVFFlatMemory(1))
	}
	return (*C.FaissIndexIVFFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexIVF) Ref() *C.FaissIndexIVF {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIVF)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexIVF) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexIVFRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexIVFRef(ref unsafe.Pointer) *FaissIndexIVF {
	return (*FaissIndexIVF)(ref)
}

// NewFaissIndexIVF allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexIVF() *FaissIndexIVF {
	return (*FaissIndexIVF)(allocFaissIndexIVFMemory(1))
}

// allocFaissIndexIVFMemory allocates memory for type C.FaissIndexIVF in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIVFMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIVFValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIVFValue = unsafe.Sizeof([1]C.FaissIndexIVF{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexIVF) PassRef() *C.FaissIndexIVF {
	if x == nil {
		x = (*FaissIndexIVF)(allocFaissIndexIVFMemory(1))
	}
	return (*C.FaissIndexIVF)(unsafe.Pointer(x))
}

// allocFaissIndexIVFStatsMemory allocates memory for type C.FaissIndexIVFStats in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIVFStatsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIVFStatsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIVFStatsValue = unsafe.Sizeof([1]C.FaissIndexIVFStats{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *FaissIndexIVFStats) Ref() *C.FaissIndexIVFStats {
	if x == nil {
		return nil
	}
	return x.refda0d0668
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *FaissIndexIVFStats) Free() {
	if x != nil && x.allocsda0d0668 != nil {
		x.allocsda0d0668.(*cgoAllocMap).Free()
		x.refda0d0668 = nil
	}
}

// NewFaissIndexIVFStatsRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFaissIndexIVFStatsRef(ref unsafe.Pointer) *FaissIndexIVFStats {
	if ref == nil {
		return nil
	}
	obj := new(FaissIndexIVFStats)
	obj.refda0d0668 = (*C.FaissIndexIVFStats)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *FaissIndexIVFStats) PassRef() (*C.FaissIndexIVFStats, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refda0d0668 != nil {
		return x.refda0d0668, nil
	}
	memda0d0668 := allocFaissIndexIVFStatsMemory(1)
	refda0d0668 := (*C.FaissIndexIVFStats)(memda0d0668)
	allocsda0d0668 := new(cgoAllocMap)
	allocsda0d0668.Add(memda0d0668)

	var cnq_allocs *cgoAllocMap
	refda0d0668.nq, cnq_allocs = (C.size_t)(x.Nq), cgoAllocsUnknown
	allocsda0d0668.Borrow(cnq_allocs)

	var cnlist_allocs *cgoAllocMap
	refda0d0668.nlist, cnlist_allocs = (C.size_t)(x.Nlist), cgoAllocsUnknown
	allocsda0d0668.Borrow(cnlist_allocs)

	var cndis_allocs *cgoAllocMap
	refda0d0668.ndis, cndis_allocs = (C.size_t)(x.Ndis), cgoAllocsUnknown
	allocsda0d0668.Borrow(cndis_allocs)

	var cnheap_updates_allocs *cgoAllocMap
	refda0d0668.nheap_updates, cnheap_updates_allocs = (C.size_t)(x.NheapUpdates), cgoAllocsUnknown
	allocsda0d0668.Borrow(cnheap_updates_allocs)

	var cquantization_time_allocs *cgoAllocMap
	refda0d0668.quantization_time, cquantization_time_allocs = (C.double)(x.QuantizationTime), cgoAllocsUnknown
	allocsda0d0668.Borrow(cquantization_time_allocs)

	var csearch_time_allocs *cgoAllocMap
	refda0d0668.search_time, csearch_time_allocs = (C.double)(x.SearchTime), cgoAllocsUnknown
	allocsda0d0668.Borrow(csearch_time_allocs)

	x.refda0d0668 = refda0d0668
	x.allocsda0d0668 = allocsda0d0668
	return refda0d0668, allocsda0d0668

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x FaissIndexIVFStats) PassValue() (C.FaissIndexIVFStats, *cgoAllocMap) {
	if x.refda0d0668 != nil {
		return *x.refda0d0668, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *FaissIndexIVFStats) Deref() {
	if x.refda0d0668 == nil {
		return
	}
	x.Nq = (uint32)(x.refda0d0668.nq)
	x.Nlist = (uint32)(x.refda0d0668.nlist)
	x.Ndis = (uint32)(x.refda0d0668.ndis)
	x.NheapUpdates = (uint32)(x.refda0d0668.nheap_updates)
	x.QuantizationTime = (float64)(x.refda0d0668.quantization_time)
	x.SearchTime = (float64)(x.refda0d0668.search_time)
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexLSH) Ref() *C.FaissIndexLSH {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexLSH)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexLSH) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexLSHRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexLSHRef(ref unsafe.Pointer) *FaissIndexLSH {
	return (*FaissIndexLSH)(ref)
}

// NewFaissIndexLSH allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexLSH() *FaissIndexLSH {
	return (*FaissIndexLSH)(allocFaissIndexLSHMemory(1))
}

// allocFaissIndexLSHMemory allocates memory for type C.FaissIndexLSH in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexLSHMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexLSHValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexLSHValue = unsafe.Sizeof([1]C.FaissIndexLSH{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexLSH) PassRef() *C.FaissIndexLSH {
	if x == nil {
		x = (*FaissIndexLSH)(allocFaissIndexLSHMemory(1))
	}
	return (*C.FaissIndexLSH)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexPreTransform) Ref() *C.FaissIndexPreTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexPreTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexPreTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexPreTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexPreTransformRef(ref unsafe.Pointer) *FaissIndexPreTransform {
	return (*FaissIndexPreTransform)(ref)
}

// NewFaissIndexPreTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexPreTransform() *FaissIndexPreTransform {
	return (*FaissIndexPreTransform)(allocFaissIndexPreTransformMemory(1))
}

// allocFaissIndexPreTransformMemory allocates memory for type C.FaissIndexPreTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexPreTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexPreTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexPreTransformValue = unsafe.Sizeof([1]C.FaissIndexPreTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexPreTransform) PassRef() *C.FaissIndexPreTransform {
	if x == nil {
		x = (*FaissIndexPreTransform)(allocFaissIndexPreTransformMemory(1))
	}
	return (*C.FaissIndexPreTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissVectorTransform) Ref() *C.FaissVectorTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissVectorTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissVectorTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissVectorTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissVectorTransformRef(ref unsafe.Pointer) *FaissVectorTransform {
	return (*FaissVectorTransform)(ref)
}

// NewFaissVectorTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissVectorTransform() *FaissVectorTransform {
	return (*FaissVectorTransform)(allocFaissVectorTransformMemory(1))
}

// allocFaissVectorTransformMemory allocates memory for type C.FaissVectorTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissVectorTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissVectorTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissVectorTransformValue = unsafe.Sizeof([1]C.FaissVectorTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissVectorTransform) PassRef() *C.FaissVectorTransform {
	if x == nil {
		x = (*FaissVectorTransform)(allocFaissVectorTransformMemory(1))
	}
	return (*C.FaissVectorTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissLinearTransform) Ref() *C.FaissLinearTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissLinearTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissLinearTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissLinearTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissLinearTransformRef(ref unsafe.Pointer) *FaissLinearTransform {
	return (*FaissLinearTransform)(ref)
}

// NewFaissLinearTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissLinearTransform() *FaissLinearTransform {
	return (*FaissLinearTransform)(allocFaissLinearTransformMemory(1))
}

// allocFaissLinearTransformMemory allocates memory for type C.FaissLinearTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissLinearTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissLinearTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissLinearTransformValue = unsafe.Sizeof([1]C.FaissLinearTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissLinearTransform) PassRef() *C.FaissLinearTransform {
	if x == nil {
		x = (*FaissLinearTransform)(allocFaissLinearTransformMemory(1))
	}
	return (*C.FaissLinearTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissRandomRotationMatrix) Ref() *C.FaissRandomRotationMatrix {
	if x == nil {
		return nil
	}
	return (*C.FaissRandomRotationMatrix)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissRandomRotationMatrix) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissRandomRotationMatrixRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissRandomRotationMatrixRef(ref unsafe.Pointer) *FaissRandomRotationMatrix {
	return (*FaissRandomRotationMatrix)(ref)
}

// NewFaissRandomRotationMatrix allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissRandomRotationMatrix() *FaissRandomRotationMatrix {
	return (*FaissRandomRotationMatrix)(allocFaissRandomRotationMatrixMemory(1))
}

// allocFaissRandomRotationMatrixMemory allocates memory for type C.FaissRandomRotationMatrix in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissRandomRotationMatrixMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissRandomRotationMatrixValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissRandomRotationMatrixValue = unsafe.Sizeof([1]C.FaissRandomRotationMatrix{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissRandomRotationMatrix) PassRef() *C.FaissRandomRotationMatrix {
	if x == nil {
		x = (*FaissRandomRotationMatrix)(allocFaissRandomRotationMatrixMemory(1))
	}
	return (*C.FaissRandomRotationMatrix)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissPCAMatrix) Ref() *C.FaissPCAMatrix {
	if x == nil {
		return nil
	}
	return (*C.FaissPCAMatrix)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissPCAMatrix) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissPCAMatrixRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissPCAMatrixRef(ref unsafe.Pointer) *FaissPCAMatrix {
	return (*FaissPCAMatrix)(ref)
}

// NewFaissPCAMatrix allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissPCAMatrix() *FaissPCAMatrix {
	return (*FaissPCAMatrix)(allocFaissPCAMatrixMemory(1))
}

// allocFaissPCAMatrixMemory allocates memory for type C.FaissPCAMatrix in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissPCAMatrixMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissPCAMatrixValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissPCAMatrixValue = unsafe.Sizeof([1]C.FaissPCAMatrix{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissPCAMatrix) PassRef() *C.FaissPCAMatrix {
	if x == nil {
		x = (*FaissPCAMatrix)(allocFaissPCAMatrixMemory(1))
	}
	return (*C.FaissPCAMatrix)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissITQMatrix) Ref() *C.FaissITQMatrix {
	if x == nil {
		return nil
	}
	return (*C.FaissITQMatrix)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissITQMatrix) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissITQMatrixRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissITQMatrixRef(ref unsafe.Pointer) *FaissITQMatrix {
	return (*FaissITQMatrix)(ref)
}

// NewFaissITQMatrix allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissITQMatrix() *FaissITQMatrix {
	return (*FaissITQMatrix)(allocFaissITQMatrixMemory(1))
}

// allocFaissITQMatrixMemory allocates memory for type C.FaissITQMatrix in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissITQMatrixMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissITQMatrixValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissITQMatrixValue = unsafe.Sizeof([1]C.FaissITQMatrix{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissITQMatrix) PassRef() *C.FaissITQMatrix {
	if x == nil {
		x = (*FaissITQMatrix)(allocFaissITQMatrixMemory(1))
	}
	return (*C.FaissITQMatrix)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissITQTransform) Ref() *C.FaissITQTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissITQTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissITQTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissITQTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissITQTransformRef(ref unsafe.Pointer) *FaissITQTransform {
	return (*FaissITQTransform)(ref)
}

// NewFaissITQTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissITQTransform() *FaissITQTransform {
	return (*FaissITQTransform)(allocFaissITQTransformMemory(1))
}

// allocFaissITQTransformMemory allocates memory for type C.FaissITQTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissITQTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissITQTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissITQTransformValue = unsafe.Sizeof([1]C.FaissITQTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissITQTransform) PassRef() *C.FaissITQTransform {
	if x == nil {
		x = (*FaissITQTransform)(allocFaissITQTransformMemory(1))
	}
	return (*C.FaissITQTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissOPQMatrix) Ref() *C.FaissOPQMatrix {
	if x == nil {
		return nil
	}
	return (*C.FaissOPQMatrix)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissOPQMatrix) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissOPQMatrixRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissOPQMatrixRef(ref unsafe.Pointer) *FaissOPQMatrix {
	return (*FaissOPQMatrix)(ref)
}

// NewFaissOPQMatrix allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissOPQMatrix() *FaissOPQMatrix {
	return (*FaissOPQMatrix)(allocFaissOPQMatrixMemory(1))
}

// allocFaissOPQMatrixMemory allocates memory for type C.FaissOPQMatrix in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissOPQMatrixMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissOPQMatrixValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissOPQMatrixValue = unsafe.Sizeof([1]C.FaissOPQMatrix{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissOPQMatrix) PassRef() *C.FaissOPQMatrix {
	if x == nil {
		x = (*FaissOPQMatrix)(allocFaissOPQMatrixMemory(1))
	}
	return (*C.FaissOPQMatrix)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissRemapDimensionsTransform) Ref() *C.FaissRemapDimensionsTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissRemapDimensionsTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissRemapDimensionsTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissRemapDimensionsTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissRemapDimensionsTransformRef(ref unsafe.Pointer) *FaissRemapDimensionsTransform {
	return (*FaissRemapDimensionsTransform)(ref)
}

// NewFaissRemapDimensionsTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissRemapDimensionsTransform() *FaissRemapDimensionsTransform {
	return (*FaissRemapDimensionsTransform)(allocFaissRemapDimensionsTransformMemory(1))
}

// allocFaissRemapDimensionsTransformMemory allocates memory for type C.FaissRemapDimensionsTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissRemapDimensionsTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissRemapDimensionsTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissRemapDimensionsTransformValue = unsafe.Sizeof([1]C.FaissRemapDimensionsTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissRemapDimensionsTransform) PassRef() *C.FaissRemapDimensionsTransform {
	if x == nil {
		x = (*FaissRemapDimensionsTransform)(allocFaissRemapDimensionsTransformMemory(1))
	}
	return (*C.FaissRemapDimensionsTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissNormalizationTransform) Ref() *C.FaissNormalizationTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissNormalizationTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissNormalizationTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissNormalizationTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissNormalizationTransformRef(ref unsafe.Pointer) *FaissNormalizationTransform {
	return (*FaissNormalizationTransform)(ref)
}

// NewFaissNormalizationTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissNormalizationTransform() *FaissNormalizationTransform {
	return (*FaissNormalizationTransform)(allocFaissNormalizationTransformMemory(1))
}

// allocFaissNormalizationTransformMemory allocates memory for type C.FaissNormalizationTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissNormalizationTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissNormalizationTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissNormalizationTransformValue = unsafe.Sizeof([1]C.FaissNormalizationTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissNormalizationTransform) PassRef() *C.FaissNormalizationTransform {
	if x == nil {
		x = (*FaissNormalizationTransform)(allocFaissNormalizationTransformMemory(1))
	}
	return (*C.FaissNormalizationTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissCenteringTransform) Ref() *C.FaissCenteringTransform {
	if x == nil {
		return nil
	}
	return (*C.FaissCenteringTransform)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissCenteringTransform) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissCenteringTransformRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissCenteringTransformRef(ref unsafe.Pointer) *FaissCenteringTransform {
	return (*FaissCenteringTransform)(ref)
}

// NewFaissCenteringTransform allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissCenteringTransform() *FaissCenteringTransform {
	return (*FaissCenteringTransform)(allocFaissCenteringTransformMemory(1))
}

// allocFaissCenteringTransformMemory allocates memory for type C.FaissCenteringTransform in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissCenteringTransformMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissCenteringTransformValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissCenteringTransformValue = unsafe.Sizeof([1]C.FaissCenteringTransform{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissCenteringTransform) PassRef() *C.FaissCenteringTransform {
	if x == nil {
		x = (*FaissCenteringTransform)(allocFaissCenteringTransformMemory(1))
	}
	return (*C.FaissCenteringTransform)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexReplicas) Ref() *C.FaissIndexReplicas {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexReplicas)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexReplicas) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexReplicasRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexReplicasRef(ref unsafe.Pointer) *FaissIndexReplicas {
	return (*FaissIndexReplicas)(ref)
}

// NewFaissIndexReplicas allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexReplicas() *FaissIndexReplicas {
	return (*FaissIndexReplicas)(allocFaissIndexReplicasMemory(1))
}

// allocFaissIndexReplicasMemory allocates memory for type C.FaissIndexReplicas in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexReplicasMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexReplicasValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexReplicasValue = unsafe.Sizeof([1]C.FaissIndexReplicas{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexReplicas) PassRef() *C.FaissIndexReplicas {
	if x == nil {
		x = (*FaissIndexReplicas)(allocFaissIndexReplicasMemory(1))
	}
	return (*C.FaissIndexReplicas)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexScalarQuantizer) Ref() *C.FaissIndexScalarQuantizer {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexScalarQuantizer)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexScalarQuantizer) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexScalarQuantizerRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexScalarQuantizerRef(ref unsafe.Pointer) *FaissIndexScalarQuantizer {
	return (*FaissIndexScalarQuantizer)(ref)
}

// NewFaissIndexScalarQuantizer allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexScalarQuantizer() *FaissIndexScalarQuantizer {
	return (*FaissIndexScalarQuantizer)(allocFaissIndexScalarQuantizerMemory(1))
}

// allocFaissIndexScalarQuantizerMemory allocates memory for type C.FaissIndexScalarQuantizer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexScalarQuantizerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexScalarQuantizerValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexScalarQuantizerValue = unsafe.Sizeof([1]C.FaissIndexScalarQuantizer{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexScalarQuantizer) PassRef() *C.FaissIndexScalarQuantizer {
	if x == nil {
		x = (*FaissIndexScalarQuantizer)(allocFaissIndexScalarQuantizerMemory(1))
	}
	return (*C.FaissIndexScalarQuantizer)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexIVFScalarQuantizer) Ref() *C.FaissIndexIVFScalarQuantizer {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexIVFScalarQuantizer) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexIVFScalarQuantizerRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexIVFScalarQuantizerRef(ref unsafe.Pointer) *FaissIndexIVFScalarQuantizer {
	return (*FaissIndexIVFScalarQuantizer)(ref)
}

// NewFaissIndexIVFScalarQuantizer allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexIVFScalarQuantizer() *FaissIndexIVFScalarQuantizer {
	return (*FaissIndexIVFScalarQuantizer)(allocFaissIndexIVFScalarQuantizerMemory(1))
}

// allocFaissIndexIVFScalarQuantizerMemory allocates memory for type C.FaissIndexIVFScalarQuantizer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIVFScalarQuantizerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIVFScalarQuantizerValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIVFScalarQuantizerValue = unsafe.Sizeof([1]C.FaissIndexIVFScalarQuantizer{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexIVFScalarQuantizer) PassRef() *C.FaissIndexIVFScalarQuantizer {
	if x == nil {
		x = (*FaissIndexIVFScalarQuantizer)(allocFaissIndexIVFScalarQuantizerMemory(1))
	}
	return (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexShards) Ref() *C.FaissIndexShards {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexShards)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexShards) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexShardsRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexShardsRef(ref unsafe.Pointer) *FaissIndexShards {
	return (*FaissIndexShards)(ref)
}

// NewFaissIndexShards allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexShards() *FaissIndexShards {
	return (*FaissIndexShards)(allocFaissIndexShardsMemory(1))
}

// allocFaissIndexShardsMemory allocates memory for type C.FaissIndexShards in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexShardsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexShardsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexShardsValue = unsafe.Sizeof([1]C.FaissIndexShards{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexShards) PassRef() *C.FaissIndexShards {
	if x == nil {
		x = (*FaissIndexShards)(allocFaissIndexShardsMemory(1))
	}
	return (*C.FaissIndexShards)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexIDMap) Ref() *C.FaissIndexIDMap {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIDMap)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexIDMap) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexIDMapRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexIDMapRef(ref unsafe.Pointer) *FaissIndexIDMap {
	return (*FaissIndexIDMap)(ref)
}

// NewFaissIndexIDMap allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexIDMap() *FaissIndexIDMap {
	return (*FaissIndexIDMap)(allocFaissIndexIDMapMemory(1))
}

// allocFaissIndexIDMapMemory allocates memory for type C.FaissIndexIDMap in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIDMapMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIDMapValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIDMapValue = unsafe.Sizeof([1]C.FaissIndexIDMap{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexIDMap) PassRef() *C.FaissIndexIDMap {
	if x == nil {
		x = (*FaissIndexIDMap)(allocFaissIndexIDMapMemory(1))
	}
	return (*C.FaissIndexIDMap)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *FaissIndexIDMap2) Ref() *C.FaissIndexIDMap2 {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIDMap2)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *FaissIndexIDMap2) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissIndexIDMap2Ref converts the C object reference into a raw struct reference without wrapping.
func NewFaissIndexIDMap2Ref(ref unsafe.Pointer) *FaissIndexIDMap2 {
	return (*FaissIndexIDMap2)(ref)
}

// NewFaissIndexIDMap2 allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissIndexIDMap2() *FaissIndexIDMap2 {
	return (*FaissIndexIDMap2)(allocFaissIndexIDMap2Memory(1))
}

// allocFaissIndexIDMap2Memory allocates memory for type C.FaissIndexIDMap2 in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissIndexIDMap2Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissIndexIDMap2Value))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFaissIndexIDMap2Value = unsafe.Sizeof([1]C.FaissIndexIDMap2{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *FaissIndexIDMap2) PassRef() *C.FaissIndexIDMap2 {
	if x == nil {
		x = (*FaissIndexIDMap2)(allocFaissIndexIDMap2Memory(1))
	}
	return (*C.FaissIndexIDMap2)(unsafe.Pointer(x))
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

// safeString ensures that the string is NULL-terminated, a NULL-terminated copy is created otherwise.
func safeString(str string) string {
	if len(str) > 0 && str[len(str)-1] != '\x00' {
		str = str + "\x00"
	} else if len(str) == 0 {
		str = "\x00"
	}
	return str
}

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	str = safeString(str)
	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}
