// WARNING: This file has automatically been generated on Wed, 29 Dec 2021 19:01:05 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package gofaiss

/*
#cgo pkg-config: faiss
#include "faiss.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// ParameterRangeName function as declared in c_api/AutoTune_c.h:24
func ParameterRangeName(Arg0 *FaissParameterRange) string {
	cArg0, cArg0AllocMap := (*C.FaissParameterRange)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ParameterRange_name(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// ParameterRangeValues function as declared in c_api/AutoTune_c.h:28
func ParameterRangeValues(Arg0 *FaissParameterRange, Arg1 **float64, Arg2 *uint32) {
	cArg0, cArg0AllocMap := (*C.FaissParameterRange)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (**C.double)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (*C.size_t)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	C.faiss_ParameterRange_values(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// ParameterSpaceFree function as declared in c_api/AutoTune_c.h:34
func ParameterSpaceFree(Obj *FaissParameterSpace) {
	cObj, cObjAllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_ParameterSpace_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// ParameterSpaceNew function as declared in c_api/AutoTune_c.h:37
func ParameterSpaceNew(Space **FaissParameterSpace) int32 {
	cSpace, cSpaceAllocMap := (**C.FaissParameterSpace)(unsafe.Pointer(Space)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_new(cSpace)
	runtime.KeepAlive(cSpaceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParameterSpaceNCombinations function as declared in c_api/AutoTune_c.h:40
func ParameterSpaceNCombinations(Arg0 *FaissParameterSpace) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_n_combinations(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ParameterSpaceCombinationName function as declared in c_api/AutoTune_c.h:45
func ParameterSpaceCombinationName(Arg0 *FaissParameterSpace, Arg1 uint32, Arg2 *byte, Arg3 uint32) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.size_t)(Arg1), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (*C.char)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	cArg3, cArg3AllocMap := (C.size_t)(Arg3), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_combination_name(cArg0, cArg1, cArg2, cArg3)
	runtime.KeepAlive(cArg3AllocMap)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParameterSpaceSetIndexParameters function as declared in c_api/AutoTune_c.h:52
func ParameterSpaceSetIndexParameters(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 string) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	Arg2 = safeString(Arg2)
	cArg2, cArg2AllocMap := unpackPCharString(Arg2)
	__ret := C.faiss_ParameterSpace_set_index_parameters(cArg0, cArg1, cArg2)
	runtime.KeepAlive(Arg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParameterSpaceSetIndexParametersCno function as declared in c_api/AutoTune_c.h:58
func ParameterSpaceSetIndexParametersCno(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 uint32) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (C.size_t)(Arg2), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_set_index_parameters_cno(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParameterSpaceSetIndexParameter function as declared in c_api/AutoTune_c.h:64
func ParameterSpaceSetIndexParameter(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 string, Arg3 float64) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	Arg2 = safeString(Arg2)
	cArg2, cArg2AllocMap := unpackPCharString(Arg2)
	cArg3, cArg3AllocMap := (C.double)(Arg3), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_set_index_parameter(cArg0, cArg1, cArg2, cArg3)
	runtime.KeepAlive(cArg3AllocMap)
	runtime.KeepAlive(Arg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParameterSpaceDisplay function as declared in c_api/AutoTune_c.h:71
func ParameterSpaceDisplay(Arg0 *FaissParameterSpace) {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	C.faiss_ParameterSpace_display(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
}

// ParameterSpaceAddRange function as declared in c_api/AutoTune_c.h:74
func ParameterSpaceAddRange(Arg0 *FaissParameterSpace, Arg1 string, Arg2 **FaissParameterRange) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	Arg1 = safeString(Arg1)
	cArg1, cArg1AllocMap := unpackPCharString(Arg1)
	cArg2, cArg2AllocMap := (**C.FaissParameterRange)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_add_range(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(Arg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFree function as declared in c_api/Index_c.h:44
func IndexFree(Obj *FaissIndex) {
	cObj, cObjAllocMap := (*C.FaissIndex)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_Index_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexD function as declared in c_api/Index_c.h:47
func IndexD(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_d(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIsTrained function as declared in c_api/Index_c.h:50
func IndexIsTrained(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_is_trained(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexNtotal function as declared in c_api/Index_c.h:53
func IndexNtotal(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_ntotal(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexMetricType function as declared in c_api/Index_c.h:56
func IndexMetricType(Arg0 *FaissIndex) FaissMetricType {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_metric_type(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (FaissMetricType)(__ret)
	return __v
}

// IndexSetVerbose function as declared in c_api/Index_c.h:58
func IndexSetVerbose(Arg0 *FaissIndex, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_Index_set_verbose(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexVerbose function as declared in c_api/Index_c.h:58
func IndexVerbose(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_verbose(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexTrain function as declared in c_api/Index_c.h:66
func IndexTrain(Index *FaissIndex, N int32, X *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_Index_train(cIndex, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexAdd function as declared in c_api/Index_c.h:76
func IndexAdd(Index *FaissIndex, N int32, X *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_Index_add(cIndex, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexAddWithIds function as declared in c_api/Index_c.h:86
func IndexAddWithIds(Index *FaissIndex, N int32, X *float32, Xids *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXids, cXidsAllocMap := (*C.idx_t)(unsafe.Pointer(Xids)), cgoAllocsUnknown
	__ret := C.faiss_Index_add_with_ids(cIndex, cN, cX, cXids)
	runtime.KeepAlive(cXidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexSearch function as declared in c_api/Index_c.h:102
func IndexSearch(Index *FaissIndex, N int32, X *float32, K int32, Distances *float32, Labels *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	__ret := C.faiss_Index_search(cIndex, cN, cX, cK, cDistances, cLabels)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexRangeSearch function as declared in c_api/Index_c.h:121
func IndexRangeSearch(Index *FaissIndex, N int32, X *float32, Radius float32, Result *FaissRangeSearchResult) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cRadius, cRadiusAllocMap := (C.float)(Radius), cgoAllocsUnknown
	cResult, cResultAllocMap := (*C.FaissRangeSearchResult)(unsafe.Pointer(Result)), cgoAllocsUnknown
	__ret := C.faiss_Index_range_search(cIndex, cN, cX, cRadius, cResult)
	runtime.KeepAlive(cResultAllocMap)
	runtime.KeepAlive(cRadiusAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexAssign function as declared in c_api/Index_c.h:135
func IndexAssign(Index *FaissIndex, N int32, X *float32, Labels *int32, K int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	__ret := C.faiss_Index_assign(cIndex, cN, cX, cLabels, cK)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReset function as declared in c_api/Index_c.h:145
func IndexReset(Index *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_Index_reset(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexRemoveIds function as declared in c_api/Index_c.h:151
func IndexRemoveIds(Index *FaissIndex, Sel *FaissIDSelector, NRemoved *uint32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cSel, cSelAllocMap := (*C.FaissIDSelector)(unsafe.Pointer(Sel)), cgoAllocsUnknown
	cNRemoved, cNRemovedAllocMap := (*C.size_t)(unsafe.Pointer(NRemoved)), cgoAllocsUnknown
	__ret := C.faiss_Index_remove_ids(cIndex, cSel, cNRemoved)
	runtime.KeepAlive(cNRemovedAllocMap)
	runtime.KeepAlive(cSelAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReconstruct function as declared in c_api/Index_c.h:163
func IndexReconstruct(Index *FaissIndex, Key int32, Recons *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cKey, cKeyAllocMap := (C.idx_t)(Key), cgoAllocsUnknown
	cRecons, cReconsAllocMap := (*C.float)(unsafe.Pointer(Recons)), cgoAllocsUnknown
	__ret := C.faiss_Index_reconstruct(cIndex, cKey, cRecons)
	runtime.KeepAlive(cReconsAllocMap)
	runtime.KeepAlive(cKeyAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReconstructN function as declared in c_api/Index_c.h:171
func IndexReconstructN(Index *FaissIndex, I0 int32, Ni int32, Recons *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cI0, cI0AllocMap := (C.idx_t)(I0), cgoAllocsUnknown
	cNi, cNiAllocMap := (C.idx_t)(Ni), cgoAllocsUnknown
	cRecons, cReconsAllocMap := (*C.float)(unsafe.Pointer(Recons)), cgoAllocsUnknown
	__ret := C.faiss_Index_reconstruct_n(cIndex, cI0, cNi, cRecons)
	runtime.KeepAlive(cReconsAllocMap)
	runtime.KeepAlive(cNiAllocMap)
	runtime.KeepAlive(cI0AllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexComputeResidual function as declared in c_api/Index_c.h:189
func IndexComputeResidual(Index *FaissIndex, X *float32, Residual *float32, Key int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cResidual, cResidualAllocMap := (*C.float)(unsafe.Pointer(Residual)), cgoAllocsUnknown
	cKey, cKeyAllocMap := (C.idx_t)(Key), cgoAllocsUnknown
	__ret := C.faiss_Index_compute_residual(cIndex, cX, cResidual, cKey)
	runtime.KeepAlive(cKeyAllocMap)
	runtime.KeepAlive(cResidualAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexComputeResidualN function as declared in c_api/Index_c.h:208
func IndexComputeResidualN(Index *FaissIndex, N int32, X *float32, Residuals *float32, Keys *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cResiduals, cResidualsAllocMap := (*C.float)(unsafe.Pointer(Residuals)), cgoAllocsUnknown
	cKeys, cKeysAllocMap := (*C.idx_t)(unsafe.Pointer(Keys)), cgoAllocsUnknown
	__ret := C.faiss_Index_compute_residual_n(cIndex, cN, cX, cResiduals, cKeys)
	runtime.KeepAlive(cKeysAllocMap)
	runtime.KeepAlive(cResidualsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringParametersInit function as declared in c_api/Clustering_c.h:43
func ClusteringParametersInit(Params *FaissClusteringParameters) {
	cParams, cParamsAllocMap := (*C.FaissClusteringParameters)(unsafe.Pointer(Params)), cgoAllocsUnknown
	C.faiss_ClusteringParameters_init(cParams)
	runtime.KeepAlive(cParamsAllocMap)
}

// ClusteringNiter function as declared in c_api/Clustering_c.h:61
func ClusteringNiter(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_niter(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringNredo function as declared in c_api/Clustering_c.h:62
func ClusteringNredo(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_nredo(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringVerbose function as declared in c_api/Clustering_c.h:63
func ClusteringVerbose(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_verbose(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringSpherical function as declared in c_api/Clustering_c.h:64
func ClusteringSpherical(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_spherical(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringIntCentroids function as declared in c_api/Clustering_c.h:65
func ClusteringIntCentroids(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_int_centroids(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringUpdateIndex function as declared in c_api/Clustering_c.h:66
func ClusteringUpdateIndex(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_update_index(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringFrozenCentroids function as declared in c_api/Clustering_c.h:67
func ClusteringFrozenCentroids(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_frozen_centroids(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringMinPointsPerCentroid function as declared in c_api/Clustering_c.h:69
func ClusteringMinPointsPerCentroid(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_min_points_per_centroid(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringMaxPointsPerCentroid function as declared in c_api/Clustering_c.h:70
func ClusteringMaxPointsPerCentroid(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_max_points_per_centroid(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringSeed function as declared in c_api/Clustering_c.h:72
func ClusteringSeed(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_seed(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringDecodeBlockSize function as declared in c_api/Clustering_c.h:73
func ClusteringDecodeBlockSize(Arg0 *FaissClustering) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_decode_block_size(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ClusteringD function as declared in c_api/Clustering_c.h:76
func ClusteringD(Arg0 *FaissClustering) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_d(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ClusteringK function as declared in c_api/Clustering_c.h:79
func ClusteringK(Arg0 *FaissClustering) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_k(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ClusteringIterationStatsObj function as declared in c_api/Clustering_c.h:82
func ClusteringIterationStatsObj(Arg0 *FaissClusteringIterationStats) float32 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_obj(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// ClusteringIterationStatsTime function as declared in c_api/Clustering_c.h:83
func ClusteringIterationStatsTime(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_time(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// ClusteringIterationStatsTimeSearch function as declared in c_api/Clustering_c.h:84
func ClusteringIterationStatsTimeSearch(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_time_search(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// ClusteringIterationStatsImbalanceFactor function as declared in c_api/Clustering_c.h:85
func ClusteringIterationStatsImbalanceFactor(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_imbalance_factor(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// ClusteringIterationStatsNsplit function as declared in c_api/Clustering_c.h:86
func ClusteringIterationStatsNsplit(Arg0 *FaissClusteringIterationStats) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_nsplit(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringCentroids function as declared in c_api/Clustering_c.h:89
func ClusteringCentroids(Clustering *FaissClustering, Centroids **float32, Size *uint32) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cCentroids, cCentroidsAllocMap := (**C.float)(unsafe.Pointer(Centroids)), cgoAllocsUnknown
	cSize, cSizeAllocMap := (*C.size_t)(unsafe.Pointer(Size)), cgoAllocsUnknown
	C.faiss_Clustering_centroids(cClustering, cCentroids, cSize)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cCentroidsAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
}

// ClusteringIterationStats function as declared in c_api/Clustering_c.h:95
func ClusteringIterationStats(Clustering *FaissClustering, IterationStats **FaissClusteringIterationStats, Size *uint32) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cIterationStats, cIterationStatsAllocMap := (**C.FaissClusteringIterationStats)(unsafe.Pointer(IterationStats)), cgoAllocsUnknown
	cSize, cSizeAllocMap := (*C.size_t)(unsafe.Pointer(Size)), cgoAllocsUnknown
	C.faiss_Clustering_iteration_stats(cClustering, cIterationStats, cSize)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cIterationStatsAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
}

// ClusteringNew function as declared in c_api/Clustering_c.h:101
func ClusteringNew(PClustering **FaissClustering, D int32, K int32) int32 {
	cPClustering, cPClusteringAllocMap := (**C.FaissClustering)(unsafe.Pointer(PClustering)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cK, cKAllocMap := (C.int)(K), cgoAllocsUnknown
	__ret := C.faiss_Clustering_new(cPClustering, cD, cK)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPClusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringNewWithParams function as declared in c_api/Clustering_c.h:103
func ClusteringNewWithParams(PClustering **FaissClustering, D int32, K int32, Cp *FaissClusteringParameters) int32 {
	cPClustering, cPClusteringAllocMap := (**C.FaissClustering)(unsafe.Pointer(PClustering)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cK, cKAllocMap := (C.int)(K), cgoAllocsUnknown
	cCp, cCpAllocMap := (*C.FaissClusteringParameters)(unsafe.Pointer(Cp)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_new_with_params(cPClustering, cD, cK, cCp)
	runtime.KeepAlive(cCpAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPClusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringTrain function as declared in c_api/Clustering_c.h:109
func ClusteringTrain(Clustering *FaissClustering, N int32, X *float32, Index *FaissIndex) int32 {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_train(cClustering, cN, cX, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClusteringFree function as declared in c_api/Clustering_c.h:115
func ClusteringFree(Clustering *FaissClustering) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	C.faiss_Clustering_free(cClustering)
	runtime.KeepAlive(cClusteringAllocMap)
}

// KmeansClustering function as declared in c_api/Clustering_c.h:127
func KmeansClustering(D uint32, N uint32, K uint32, X *float32, Centroids *float32, QError *float32) int32 {
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cN, cNAllocMap := (C.size_t)(N), cgoAllocsUnknown
	cK, cKAllocMap := (C.size_t)(K), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cCentroids, cCentroidsAllocMap := (*C.float)(unsafe.Pointer(Centroids)), cgoAllocsUnknown
	cQError, cQErrorAllocMap := (*C.float)(unsafe.Pointer(QError)), cgoAllocsUnknown
	__ret := C.faiss_kmeans_clustering(cD, cN, cK, cX, cCentroids, cQError)
	runtime.KeepAlive(cQErrorAllocMap)
	runtime.KeepAlive(cCentroidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cDAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatNew function as declared in c_api/IndexFlat_c.h:27
func IndexFlatNew(PIndex **FaissIndexFlat) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatNewWith function as declared in c_api/IndexFlat_c.h:29
func IndexFlatNewWith(PIndex **FaissIndexFlat, D int32, Metric FaissMetricType) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_new_with(cPIndex, cD, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatXb function as declared in c_api/IndexFlat_c.h:41
func IndexFlatXb(Index *FaissIndexFlat, PXb **float32, PSize *uint32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cPXb, cPXbAllocMap := (**C.float)(unsafe.Pointer(PXb)), cgoAllocsUnknown
	cPSize, cPSizeAllocMap := (*C.size_t)(unsafe.Pointer(PSize)), cgoAllocsUnknown
	C.faiss_IndexFlat_xb(cIndex, cPXb, cPSize)
	runtime.KeepAlive(cPSizeAllocMap)
	runtime.KeepAlive(cPXbAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// IndexFlatCast function as declared in c_api/IndexFlat_c.h:49
func IndexFlatCast(Arg0 *FaissIndex) *FaissIndexFlat {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexFlat)(unsafe.Pointer(&__ret))
	return __v
}

// IndexFlatFree function as declared in c_api/IndexFlat_c.h:51
func IndexFlatFree(Obj *FaissIndexFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexFlatComputeDistanceSubset function as declared in c_api/IndexFlat_c.h:62
func IndexFlatComputeDistanceSubset(Index *FaissIndex, N int32, X *float32, K int32, Distances *float32, Labels *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_compute_distance_subset(cIndex, cN, cX, cK, cDistances, cLabels)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatIPCast function as declared in c_api/IndexFlat_c.h:73
func IndexFlatIPCast(Arg0 *FaissIndex) *FaissIndexFlatIP {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatIP_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexFlatIP)(unsafe.Pointer(&__ret))
	return __v
}

// IndexFlatIPFree function as declared in c_api/IndexFlat_c.h:74
func IndexFlatIPFree(Obj *FaissIndexFlatIP) {
	cObj, cObjAllocMap := (*C.FaissIndexFlatIP)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexFlatIP_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexFlatIPNew function as declared in c_api/IndexFlat_c.h:76
func IndexFlatIPNew(PIndex **FaissIndexFlatIP) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlatIP)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatIP_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatIPNewWith function as declared in c_api/IndexFlat_c.h:78
func IndexFlatIPNewWith(PIndex **FaissIndexFlatIP, D int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlatIP)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatIP_new_with(cPIndex, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatL2Cast function as declared in c_api/IndexFlat_c.h:83
func IndexFlatL2Cast(Arg0 *FaissIndex) *FaissIndexFlatL2 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexFlatL2)(unsafe.Pointer(&__ret))
	return __v
}

// IndexFlatL2Free function as declared in c_api/IndexFlat_c.h:84
func IndexFlatL2Free(Obj *FaissIndexFlatL2) {
	cObj, cObjAllocMap := (*C.FaissIndexFlatL2)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexFlatL2_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexFlatL2New function as declared in c_api/IndexFlat_c.h:86
func IndexFlatL2New(PIndex **FaissIndexFlatL2) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlatL2)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlatL2NewWith function as declared in c_api/IndexFlat_c.h:88
func IndexFlatL2NewWith(PIndex **FaissIndexFlatL2, D int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlatL2)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2_new_with(cPIndex, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexRefineFlatNew function as declared in c_api/IndexFlat_c.h:97
func IndexRefineFlatNew(PIndex **FaissIndexRefineFlat, BaseIndex *FaissIndex) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexRefineFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cBaseIndex, cBaseIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(BaseIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexRefineFlat_new(cPIndex, cBaseIndex)
	runtime.KeepAlive(cBaseIndexAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexRefineFlatFree function as declared in c_api/IndexFlat_c.h:101
func IndexRefineFlatFree(Obj *FaissIndexRefineFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexRefineFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexRefineFlatCast function as declared in c_api/IndexFlat_c.h:102
func IndexRefineFlatCast(Arg0 *FaissIndex) *FaissIndexRefineFlat {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexRefineFlat_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexRefineFlat)(unsafe.Pointer(&__ret))
	return __v
}

// IndexRefineFlatOwnFields function as declared in c_api/IndexFlat_c.h:104
func IndexRefineFlatOwnFields(Arg0 *FaissIndexRefineFlat) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexRefineFlat_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexRefineFlatSetOwnFields function as declared in c_api/IndexFlat_c.h:104
func IndexRefineFlatSetOwnFields(Arg0 *FaissIndexRefineFlat, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexRefineFlat_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexRefineFlatKFactor function as declared in c_api/IndexFlat_c.h:108
func IndexRefineFlatKFactor(Arg0 *FaissIndexRefineFlat) float32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexRefineFlat_k_factor(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// IndexRefineFlatSetKFactor function as declared in c_api/IndexFlat_c.h:108
func IndexRefineFlatSetKFactor(Arg0 *FaissIndexRefineFlat, Arg1 float32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.float)(Arg1), cgoAllocsUnknown
	C.faiss_IndexRefineFlat_set_k_factor(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexFlat1DCast function as declared in c_api/IndexFlat_c.h:116
func IndexFlat1DCast(Arg0 *FaissIndex) *FaissIndexFlat1D {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexFlat1D)(unsafe.Pointer(&__ret))
	return __v
}

// IndexFlat1DFree function as declared in c_api/IndexFlat_c.h:117
func IndexFlat1DFree(Obj *FaissIndexFlat1D) {
	cObj, cObjAllocMap := (*C.FaissIndexFlat1D)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexFlat1D_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexFlat1DNew function as declared in c_api/IndexFlat_c.h:119
func IndexFlat1DNew(PIndex **FaissIndexFlat1D) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlat1D)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlat1DNewWith function as declared in c_api/IndexFlat_c.h:120
func IndexFlat1DNewWith(PIndex **FaissIndexFlat1D, ContinuousUpdate int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexFlat1D)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cContinuousUpdate, cContinuousUpdateAllocMap := (C.int)(ContinuousUpdate), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_new_with(cPIndex, cContinuousUpdate)
	runtime.KeepAlive(cContinuousUpdateAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexFlat1DUpdatePermutation function as declared in c_api/IndexFlat_c.h:124
func IndexFlat1DUpdatePermutation(Index *FaissIndexFlat1D) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexFlat1D)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_update_permutation(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatFree function as declared in c_api/IndexIVFFlat_c.h:27
func IndexIVFFlatFree(Obj *FaissIndexIVFFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexIVFFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexIVFFlatCast function as declared in c_api/IndexIVFFlat_c.h:28
func IndexIVFFlatCast(Arg0 *FaissIndex) *FaissIndexIVFFlat {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIVFFlat)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFFlatNlist function as declared in c_api/IndexIVFFlat_c.h:31
func IndexIVFFlatNlist(Arg0 *FaissIndexIVFFlat) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_nlist(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFFlatNprobe function as declared in c_api/IndexIVFFlat_c.h:33
func IndexIVFFlatNprobe(Arg0 *FaissIndexIVFFlat) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_nprobe(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFFlatSetNprobe function as declared in c_api/IndexIVFFlat_c.h:33
func IndexIVFFlatSetNprobe(Arg0 *FaissIndexIVFFlat, Arg1 uint32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.size_t)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVFFlat_set_nprobe(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFFlatQuantizer function as declared in c_api/IndexIVFFlat_c.h:35
func IndexIVFFlatQuantizer(Arg0 *FaissIndexIVFFlat) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_quantizer(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFFlatQuantizerTrainsAlone function as declared in c_api/IndexIVFFlat_c.h:41
func IndexIVFFlatQuantizerTrainsAlone(Arg0 *FaissIndexIVFFlat) byte {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_quantizer_trains_alone(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (byte)(__ret)
	return __v
}

// IndexIVFFlatOwnFields function as declared in c_api/IndexIVFFlat_c.h:44
func IndexIVFFlatOwnFields(Arg0 *FaissIndexIVFFlat) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatSetOwnFields function as declared in c_api/IndexIVFFlat_c.h:44
func IndexIVFFlatSetOwnFields(Arg0 *FaissIndexIVFFlat, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVFFlat_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFFlatNew function as declared in c_api/IndexIVFFlat_c.h:46
func IndexIVFFlatNew(PIndex **FaissIndexIVFFlat) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatNewWith function as declared in c_api/IndexIVFFlat_c.h:48
func IndexIVFFlatNewWith(PIndex **FaissIndexIVFFlat, Quantizer *FaissIndex, D uint32, Nlist uint32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cQuantizer, cQuantizerAllocMap := (*C.FaissIndex)(unsafe.Pointer(Quantizer)), cgoAllocsUnknown
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cNlist, cNlistAllocMap := (C.size_t)(Nlist), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new_with(cPIndex, cQuantizer, cD, cNlist)
	runtime.KeepAlive(cNlistAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cQuantizerAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatNewWithMetric function as declared in c_api/IndexIVFFlat_c.h:54
func IndexIVFFlatNewWithMetric(PIndex **FaissIndexIVFFlat, Quantizer *FaissIndex, D uint32, Nlist uint32, Metric FaissMetricType) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cQuantizer, cQuantizerAllocMap := (*C.FaissIndex)(unsafe.Pointer(Quantizer)), cgoAllocsUnknown
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cNlist, cNlistAllocMap := (C.size_t)(Nlist), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new_with_metric(cPIndex, cQuantizer, cD, cNlist, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cNlistAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cQuantizerAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatAddCore function as declared in c_api/IndexIVFFlat_c.h:61
func IndexIVFFlatAddCore(Index *FaissIndexIVFFlat, N int32, X *float32, Xids *int32, PrecomputedIdx *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXids, cXidsAllocMap := (*C.idx_t)(unsafe.Pointer(Xids)), cgoAllocsUnknown
	cPrecomputedIdx, cPrecomputedIdxAllocMap := (*C.int64_t)(unsafe.Pointer(PrecomputedIdx)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_add_core(cIndex, cN, cX, cXids, cPrecomputedIdx)
	runtime.KeepAlive(cPrecomputedIdxAllocMap)
	runtime.KeepAlive(cXidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFlatUpdateVectors function as declared in c_api/IndexIVFFlat_c.h:76
func IndexIVFFlatUpdateVectors(Index *FaissIndexIVFFlat, Nv int32, Idx *int32, V *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cNv, cNvAllocMap := (C.int)(Nv), cgoAllocsUnknown
	cIdx, cIdxAllocMap := (*C.idx_t)(unsafe.Pointer(Idx)), cgoAllocsUnknown
	cV, cVAllocMap := (*C.float)(unsafe.Pointer(V)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_update_vectors(cIndex, cNv, cIdx, cV)
	runtime.KeepAlive(cVAllocMap)
	runtime.KeepAlive(cIdxAllocMap)
	runtime.KeepAlive(cNvAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFFree function as declared in c_api/IndexIVF_c.h:40
func IndexIVFFree(Obj *FaissIndexIVF) {
	cObj, cObjAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexIVF_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexIVFCast function as declared in c_api/IndexIVF_c.h:41
func IndexIVFCast(Arg0 *FaissIndex) *FaissIndexIVF {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIVF)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFNlist function as declared in c_api/IndexIVF_c.h:44
func IndexIVFNlist(Arg0 *FaissIndexIVF) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_nlist(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFNprobe function as declared in c_api/IndexIVF_c.h:46
func IndexIVFNprobe(Arg0 *FaissIndexIVF) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_nprobe(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFSetNprobe function as declared in c_api/IndexIVF_c.h:46
func IndexIVFSetNprobe(Arg0 *FaissIndexIVF, Arg1 uint32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.size_t)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVF_set_nprobe(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFQuantizer function as declared in c_api/IndexIVF_c.h:48
func IndexIVFQuantizer(Arg0 *FaissIndexIVF) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_quantizer(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFQuantizerTrainsAlone function as declared in c_api/IndexIVF_c.h:54
func IndexIVFQuantizerTrainsAlone(Arg0 *FaissIndexIVF) byte {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_quantizer_trains_alone(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (byte)(__ret)
	return __v
}

// IndexIVFOwnFields function as declared in c_api/IndexIVF_c.h:57
func IndexIVFOwnFields(Arg0 *FaissIndexIVF) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFSetOwnFields function as declared in c_api/IndexIVF_c.h:57
func IndexIVFSetOwnFields(Arg0 *FaissIndexIVF, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVF_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFMergeFrom function as declared in c_api/IndexIVF_c.h:62
func IndexIVFMergeFrom(Index *FaissIndexIVF, Other *FaissIndexIVF, AddId int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cOther, cOtherAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Other)), cgoAllocsUnknown
	cAddId, cAddIdAllocMap := (C.idx_t)(AddId), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_merge_from(cIndex, cOther, cAddId)
	runtime.KeepAlive(cAddIdAllocMap)
	runtime.KeepAlive(cOtherAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFCopySubsetTo function as declared in c_api/IndexIVF_c.h:74
func IndexIVFCopySubsetTo(Index *FaissIndexIVF, Other *FaissIndexIVF, SubsetType int32, A1 int32, A2 int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cOther, cOtherAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Other)), cgoAllocsUnknown
	cSubsetType, cSubsetTypeAllocMap := (C.int)(SubsetType), cgoAllocsUnknown
	cA1, cA1AllocMap := (C.idx_t)(A1), cgoAllocsUnknown
	cA2, cA2AllocMap := (C.idx_t)(A2), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_copy_subset_to(cIndex, cOther, cSubsetType, cA1, cA2)
	runtime.KeepAlive(cA2AllocMap)
	runtime.KeepAlive(cA1AllocMap)
	runtime.KeepAlive(cSubsetTypeAllocMap)
	runtime.KeepAlive(cOtherAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFSearchPreassigned function as declared in c_api/IndexIVF_c.h:97
func IndexIVFSearchPreassigned(Index *FaissIndexIVF, N int32, X *float32, K int32, Assign *int32, CentroidDis *float32, Distances *float32, Labels *int32, StorePairs int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cAssign, cAssignAllocMap := (*C.idx_t)(unsafe.Pointer(Assign)), cgoAllocsUnknown
	cCentroidDis, cCentroidDisAllocMap := (*C.float)(unsafe.Pointer(CentroidDis)), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	cStorePairs, cStorePairsAllocMap := (C.int)(StorePairs), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_search_preassigned(cIndex, cN, cX, cK, cAssign, cCentroidDis, cDistances, cLabels, cStorePairs)
	runtime.KeepAlive(cStorePairsAllocMap)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cCentroidDisAllocMap)
	runtime.KeepAlive(cAssignAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFGetListSize function as declared in c_api/IndexIVF_c.h:108
func IndexIVFGetListSize(Index *FaissIndexIVF, ListNo uint32) uint32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cListNo, cListNoAllocMap := (C.size_t)(ListNo), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_get_list_size(cIndex, cListNo)
	runtime.KeepAlive(cListNoAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFMakeDirectMap function as declared in c_api/IndexIVF_c.h:115
func IndexIVFMakeDirectMap(Index *FaissIndexIVF, NewMaintainDirectMap int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cNewMaintainDirectMap, cNewMaintainDirectMapAllocMap := (C.int)(NewMaintainDirectMap), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_make_direct_map(cIndex, cNewMaintainDirectMap)
	runtime.KeepAlive(cNewMaintainDirectMapAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFImbalanceFactor function as declared in c_api/IndexIVF_c.h:123
func IndexIVFImbalanceFactor(Index *FaissIndexIVF) float64 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_imbalance_factor(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (float64)(__ret)
	return __v
}

// IndexIVFPrintStats function as declared in c_api/IndexIVF_c.h:126
func IndexIVFPrintStats(Index *FaissIndexIVF) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	C.faiss_IndexIVF_print_stats(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
}

// IndexIVFInvlistsGetIds function as declared in c_api/IndexIVF_c.h:136
func IndexIVFInvlistsGetIds(Index *FaissIndexIVF, ListNo uint32, Invlist *int32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cListNo, cListNoAllocMap := (C.size_t)(ListNo), cgoAllocsUnknown
	cInvlist, cInvlistAllocMap := (*C.idx_t)(unsafe.Pointer(Invlist)), cgoAllocsUnknown
	C.faiss_IndexIVF_invlists_get_ids(cIndex, cListNo, cInvlist)
	runtime.KeepAlive(cInvlistAllocMap)
	runtime.KeepAlive(cListNoAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// IndexIVFStatsReset function as declared in c_api/IndexIVF_c.h:150
func IndexIVFStatsReset(Stats *FaissIndexIVFStats) {
	cStats, cStatsAllocMap := (*C.FaissIndexIVFStats)(unsafe.Pointer(Stats)), cgoAllocsUnknown
	C.faiss_IndexIVFStats_reset(cStats)
	runtime.KeepAlive(cStatsAllocMap)
}

// IndexIVFStatsInit function as declared in c_api/IndexIVF_c.h:152
func IndexIVFStatsInit(Stats *FaissIndexIVFStats) {
	cStats, cStatsAllocMap := (*C.FaissIndexIVFStats)(unsafe.Pointer(Stats)), cgoAllocsUnknown
	C.faiss_IndexIVFStats_init(cStats)
	runtime.KeepAlive(cStatsAllocMap)
}

// GetIndexIVFStats function as declared in c_api/IndexIVF_c.h:157
func GetIndexIVFStats() *FaissIndexIVFStats {
	__ret := C.faiss_get_indexIVF_stats()
	__v := *(**FaissIndexIVFStats)(unsafe.Pointer(&__ret))
	return __v
}

// IndexLSHFree function as declared in c_api/IndexLSH_c.h:24
func IndexLSHFree(Obj *FaissIndexLSH) {
	cObj, cObjAllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexLSH_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexLSHCast function as declared in c_api/IndexLSH_c.h:25
func IndexLSHCast(Arg0 *FaissIndex) *FaissIndexLSH {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexLSH)(unsafe.Pointer(&__ret))
	return __v
}

// IndexLSHNbits function as declared in c_api/IndexLSH_c.h:27
func IndexLSHNbits(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_nbits(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexLSHCodeSize function as declared in c_api/IndexLSH_c.h:28
func IndexLSHCodeSize(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_code_size(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexLSHRotateData function as declared in c_api/IndexLSH_c.h:29
func IndexLSHRotateData(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_rotate_data(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexLSHTrainThresholds function as declared in c_api/IndexLSH_c.h:30
func IndexLSHTrainThresholds(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_train_thresholds(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexLSHNew function as declared in c_api/IndexLSH_c.h:32
func IndexLSHNew(PIndex **FaissIndexLSH, D int32, Nbits int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexLSH)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cNbits, cNbitsAllocMap := (C.int)(Nbits), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_new(cPIndex, cD, cNbits)
	runtime.KeepAlive(cNbitsAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexLSHNewWithOptions function as declared in c_api/IndexLSH_c.h:34
func IndexLSHNewWithOptions(PIndex **FaissIndexLSH, D int32, Nbits int32, RotateData int32, TrainThresholds int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexLSH)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cNbits, cNbitsAllocMap := (C.int)(Nbits), cgoAllocsUnknown
	cRotateData, cRotateDataAllocMap := (C.int)(RotateData), cgoAllocsUnknown
	cTrainThresholds, cTrainThresholdsAllocMap := (C.int)(TrainThresholds), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_new_with_options(cPIndex, cD, cNbits, cRotateData, cTrainThresholds)
	runtime.KeepAlive(cTrainThresholdsAllocMap)
	runtime.KeepAlive(cRotateDataAllocMap)
	runtime.KeepAlive(cNbitsAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexPreTransformFree function as declared in c_api/IndexPreTransform_c.h:25
func IndexPreTransformFree(Obj *FaissIndexPreTransform) {
	cObj, cObjAllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexPreTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexPreTransformCast function as declared in c_api/IndexPreTransform_c.h:26
func IndexPreTransformCast(Arg0 *FaissIndex) *FaissIndexPreTransform {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexPreTransform)(unsafe.Pointer(&__ret))
	return __v
}

// IndexPreTransformIndex function as declared in c_api/IndexPreTransform_c.h:28
func IndexPreTransformIndex(Arg0 *FaissIndexPreTransform) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_index(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexPreTransformOwnFields function as declared in c_api/IndexPreTransform_c.h:29
func IndexPreTransformOwnFields(Arg0 *FaissIndexPreTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexPreTransformSetOwnFields function as declared in c_api/IndexPreTransform_c.h:29
func IndexPreTransformSetOwnFields(Arg0 *FaissIndexPreTransform, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexPreTransform_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexPreTransformNew function as declared in c_api/IndexPreTransform_c.h:31
func IndexPreTransformNew(PIndex **FaissIndexPreTransform) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexPreTransform)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexPreTransformNewWith function as declared in c_api/IndexPreTransform_c.h:33
func IndexPreTransformNewWith(PIndex **FaissIndexPreTransform, Index *FaissIndex) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexPreTransform)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_new_with(cPIndex, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexPreTransformNewWithTransform function as declared in c_api/IndexPreTransform_c.h:37
func IndexPreTransformNewWithTransform(PIndex **FaissIndexPreTransform, Ltrans *FaissVectorTransform, Index *FaissIndex) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexPreTransform)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cLtrans, cLtransAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Ltrans)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_new_with_transform(cPIndex, cLtrans, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cLtransAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexPreTransformPrependTransform function as declared in c_api/IndexPreTransform_c.h:42
func IndexPreTransformPrependTransform(Index *FaissIndexPreTransform, Ltrans *FaissVectorTransform) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cLtrans, cLtransAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Ltrans)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_prepend_transform(cIndex, cLtrans)
	runtime.KeepAlive(cLtransAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// VectorTransformFree function as declared in c_api/VectorTransform_c.h:26
func VectorTransformFree(Obj *FaissVectorTransform) {
	cObj, cObjAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_VectorTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// VectorTransformIsTrained function as declared in c_api/VectorTransform_c.h:29
func VectorTransformIsTrained(Arg0 *FaissVectorTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_VectorTransform_is_trained(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// VectorTransformDIn function as declared in c_api/VectorTransform_c.h:32
func VectorTransformDIn(Arg0 *FaissVectorTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_VectorTransform_d_in(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// VectorTransformDOut function as declared in c_api/VectorTransform_c.h:35
func VectorTransformDOut(Arg0 *FaissVectorTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_VectorTransform_d_out(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// VectorTransformTrain function as declared in c_api/VectorTransform_c.h:43
func VectorTransformTrain(Vt *FaissVectorTransform, N int32, X *float32) int32 {
	cVt, cVtAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_VectorTransform_train(cVt, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// VectorTransformApply function as declared in c_api/VectorTransform_c.h:52
func VectorTransformApply(Vt *FaissVectorTransform, N int32, X *float32) *float32 {
	cVt, cVtAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_VectorTransform_apply(cVt, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cVtAllocMap)
	__v := *(**float32)(unsafe.Pointer(&__ret))
	return __v
}

// VectorTransformApplyNoalloc function as declared in c_api/VectorTransform_c.h:61
func VectorTransformApplyNoalloc(Vt *FaissVectorTransform, N int32, X *float32, Xt *float32) {
	cVt, cVtAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXt, cXtAllocMap := (*C.float)(unsafe.Pointer(Xt)), cgoAllocsUnknown
	C.faiss_VectorTransform_apply_noalloc(cVt, cN, cX, cXt)
	runtime.KeepAlive(cXtAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cVtAllocMap)
}

// VectorTransformReverseTransform function as declared in c_api/VectorTransform_c.h:69
func VectorTransformReverseTransform(Vt *FaissVectorTransform, N int32, Xt *float32, X *float32) {
	cVt, cVtAllocMap := (*C.FaissVectorTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cXt, cXtAllocMap := (*C.float)(unsafe.Pointer(Xt)), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	C.faiss_VectorTransform_reverse_transform(cVt, cN, cXt, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cXtAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cVtAllocMap)
}

// LinearTransformFree function as declared in c_api/VectorTransform_c.h:77
func LinearTransformFree(Obj *FaissLinearTransform) {
	cObj, cObjAllocMap := (*C.FaissLinearTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_LinearTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// LinearTransformTransformTranspose function as declared in c_api/VectorTransform_c.h:81
func LinearTransformTransformTranspose(Vt *FaissLinearTransform, N int32, Y *float32, X *float32) {
	cVt, cVtAllocMap := (*C.FaissLinearTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cY, cYAllocMap := (*C.float)(unsafe.Pointer(Y)), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	C.faiss_LinearTransform_transform_transpose(cVt, cN, cY, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cYAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cVtAllocMap)
}

// LinearTransformSetIsOrthonormal function as declared in c_api/VectorTransform_c.h:88
func LinearTransformSetIsOrthonormal(Vt *FaissLinearTransform) {
	cVt, cVtAllocMap := (*C.FaissLinearTransform)(unsafe.Pointer(Vt)), cgoAllocsUnknown
	C.faiss_LinearTransform_set_is_orthonormal(cVt)
	runtime.KeepAlive(cVtAllocMap)
}

// LinearTransformHaveBias function as declared in c_api/VectorTransform_c.h:91
func LinearTransformHaveBias(Arg0 *FaissLinearTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissLinearTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_LinearTransform_have_bias(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// LinearTransformIsOrthonormal function as declared in c_api/VectorTransform_c.h:94
func LinearTransformIsOrthonormal(Arg0 *FaissLinearTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissLinearTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_LinearTransform_is_orthonormal(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// RandomRotationMatrixFree function as declared in c_api/VectorTransform_c.h:97
func RandomRotationMatrixFree(Obj *FaissRandomRotationMatrix) {
	cObj, cObjAllocMap := (*C.FaissRandomRotationMatrix)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_RandomRotationMatrix_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// RandomRotationMatrixNewWith function as declared in c_api/VectorTransform_c.h:99
func RandomRotationMatrixNewWith(PVt **FaissRandomRotationMatrix, DIn int32, DOut int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissRandomRotationMatrix)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cDIn, cDInAllocMap := (C.int)(DIn), cgoAllocsUnknown
	cDOut, cDOutAllocMap := (C.int)(DOut), cgoAllocsUnknown
	__ret := C.faiss_RandomRotationMatrix_new_with(cPVt, cDIn, cDOut)
	runtime.KeepAlive(cDOutAllocMap)
	runtime.KeepAlive(cDInAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// PCAMatrixFree function as declared in c_api/VectorTransform_c.h:105
func PCAMatrixFree(Obj *FaissPCAMatrix) {
	cObj, cObjAllocMap := (*C.FaissPCAMatrix)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_PCAMatrix_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// PCAMatrixNewWith function as declared in c_api/VectorTransform_c.h:107
func PCAMatrixNewWith(PVt **FaissPCAMatrix, DIn int32, DOut int32, EigenPower float32, RandomRotation int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissPCAMatrix)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cDIn, cDInAllocMap := (C.int)(DIn), cgoAllocsUnknown
	cDOut, cDOutAllocMap := (C.int)(DOut), cgoAllocsUnknown
	cEigenPower, cEigenPowerAllocMap := (C.float)(EigenPower), cgoAllocsUnknown
	cRandomRotation, cRandomRotationAllocMap := (C.int)(RandomRotation), cgoAllocsUnknown
	__ret := C.faiss_PCAMatrix_new_with(cPVt, cDIn, cDOut, cEigenPower, cRandomRotation)
	runtime.KeepAlive(cRandomRotationAllocMap)
	runtime.KeepAlive(cEigenPowerAllocMap)
	runtime.KeepAlive(cDOutAllocMap)
	runtime.KeepAlive(cDInAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// PCAMatrixEigenPower function as declared in c_api/VectorTransform_c.h:115
func PCAMatrixEigenPower(Arg0 *FaissPCAMatrix) float32 {
	cArg0, cArg0AllocMap := (*C.FaissPCAMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_PCAMatrix_eigen_power(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// PCAMatrixRandomRotation function as declared in c_api/VectorTransform_c.h:118
func PCAMatrixRandomRotation(Arg0 *FaissPCAMatrix) int32 {
	cArg0, cArg0AllocMap := (*C.FaissPCAMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_PCAMatrix_random_rotation(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// ITQMatrixFree function as declared in c_api/VectorTransform_c.h:121
func ITQMatrixFree(Obj *FaissITQMatrix) {
	cObj, cObjAllocMap := (*C.FaissITQMatrix)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_ITQMatrix_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// ITQMatrixNewWith function as declared in c_api/VectorTransform_c.h:123
func ITQMatrixNewWith(PVt **FaissITQMatrix, D int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissITQMatrix)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	__ret := C.faiss_ITQMatrix_new_with(cPVt, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ITQTransformFree function as declared in c_api/VectorTransform_c.h:126
func ITQTransformFree(Obj *FaissITQTransform) {
	cObj, cObjAllocMap := (*C.FaissITQTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_ITQTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// ITQTransformNewWith function as declared in c_api/VectorTransform_c.h:128
func ITQTransformNewWith(PVt **FaissITQTransform, DIn int32, DOut int32, DoPca int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissITQTransform)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cDIn, cDInAllocMap := (C.int)(DIn), cgoAllocsUnknown
	cDOut, cDOutAllocMap := (C.int)(DOut), cgoAllocsUnknown
	cDoPca, cDoPcaAllocMap := (C.int)(DoPca), cgoAllocsUnknown
	__ret := C.faiss_ITQTransform_new_with(cPVt, cDIn, cDOut, cDoPca)
	runtime.KeepAlive(cDoPcaAllocMap)
	runtime.KeepAlive(cDOutAllocMap)
	runtime.KeepAlive(cDInAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ITQTransformDoPca function as declared in c_api/VectorTransform_c.h:135
func ITQTransformDoPca(Arg0 *FaissITQTransform) int32 {
	cArg0, cArg0AllocMap := (*C.FaissITQTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ITQTransform_do_pca(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// OPQMatrixFree function as declared in c_api/VectorTransform_c.h:138
func OPQMatrixFree(Obj *FaissOPQMatrix) {
	cObj, cObjAllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_OPQMatrix_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// OPQMatrixNewWith function as declared in c_api/VectorTransform_c.h:140
func OPQMatrixNewWith(PVt **FaissOPQMatrix, D int32, M int32, D2 int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissOPQMatrix)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cM, cMAllocMap := (C.int)(M), cgoAllocsUnknown
	cD2, cD2AllocMap := (C.int)(D2), cgoAllocsUnknown
	__ret := C.faiss_OPQMatrix_new_with(cPVt, cD, cM, cD2)
	runtime.KeepAlive(cD2AllocMap)
	runtime.KeepAlive(cMAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OPQMatrixSetVerbose function as declared in c_api/VectorTransform_c.h:142
func OPQMatrixSetVerbose(Arg0 *FaissOPQMatrix, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_OPQMatrix_set_verbose(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// OPQMatrixVerbose function as declared in c_api/VectorTransform_c.h:142
func OPQMatrixVerbose(Arg0 *FaissOPQMatrix) int32 {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_OPQMatrix_verbose(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// OPQMatrixNiter function as declared in c_api/VectorTransform_c.h:143
func OPQMatrixNiter(Arg0 *FaissOPQMatrix) int32 {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_OPQMatrix_niter(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// OPQMatrixSetNiter function as declared in c_api/VectorTransform_c.h:143
func OPQMatrixSetNiter(Arg0 *FaissOPQMatrix, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_OPQMatrix_set_niter(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// OPQMatrixNiterPq function as declared in c_api/VectorTransform_c.h:144
func OPQMatrixNiterPq(Arg0 *FaissOPQMatrix) int32 {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_OPQMatrix_niter_pq(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// OPQMatrixSetNiterPq function as declared in c_api/VectorTransform_c.h:144
func OPQMatrixSetNiterPq(Arg0 *FaissOPQMatrix, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissOPQMatrix)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_OPQMatrix_set_niter_pq(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// RemapDimensionsTransformFree function as declared in c_api/VectorTransform_c.h:147
func RemapDimensionsTransformFree(Obj *FaissRemapDimensionsTransform) {
	cObj, cObjAllocMap := (*C.FaissRemapDimensionsTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_RemapDimensionsTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// RemapDimensionsTransformNewWith function as declared in c_api/VectorTransform_c.h:149
func RemapDimensionsTransformNewWith(PVt **FaissRemapDimensionsTransform, DIn int32, DOut int32, Uniform int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissRemapDimensionsTransform)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cDIn, cDInAllocMap := (C.int)(DIn), cgoAllocsUnknown
	cDOut, cDOutAllocMap := (C.int)(DOut), cgoAllocsUnknown
	cUniform, cUniformAllocMap := (C.int)(Uniform), cgoAllocsUnknown
	__ret := C.faiss_RemapDimensionsTransform_new_with(cPVt, cDIn, cDOut, cUniform)
	runtime.KeepAlive(cUniformAllocMap)
	runtime.KeepAlive(cDOutAllocMap)
	runtime.KeepAlive(cDInAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NormalizationTransformFree function as declared in c_api/VectorTransform_c.h:156
func NormalizationTransformFree(Obj *FaissNormalizationTransform) {
	cObj, cObjAllocMap := (*C.FaissNormalizationTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_NormalizationTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// NormalizationTransformNewWith function as declared in c_api/VectorTransform_c.h:158
func NormalizationTransformNewWith(PVt **FaissNormalizationTransform, D int32, Norm float32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissNormalizationTransform)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cNorm, cNormAllocMap := (C.float)(Norm), cgoAllocsUnknown
	__ret := C.faiss_NormalizationTransform_new_with(cPVt, cD, cNorm)
	runtime.KeepAlive(cNormAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NormalizationTransformNorm function as declared in c_api/VectorTransform_c.h:163
func NormalizationTransformNorm(Arg0 *FaissNormalizationTransform) float32 {
	cArg0, cArg0AllocMap := (*C.FaissNormalizationTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_NormalizationTransform_norm(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// CenteringTransformFree function as declared in c_api/VectorTransform_c.h:166
func CenteringTransformFree(Obj *FaissCenteringTransform) {
	cObj, cObjAllocMap := (*C.FaissCenteringTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_CenteringTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// CenteringTransformNewWith function as declared in c_api/VectorTransform_c.h:168
func CenteringTransformNewWith(PVt **FaissCenteringTransform, D int32) int32 {
	cPVt, cPVtAllocMap := (**C.FaissCenteringTransform)(unsafe.Pointer(PVt)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	__ret := C.faiss_CenteringTransform_new_with(cPVt, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPVtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasFree function as declared in c_api/IndexReplicas_c.h:24
func IndexReplicasFree(Obj *FaissIndexReplicas) {
	cObj, cObjAllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexReplicas_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexReplicasOwnFields function as declared in c_api/IndexReplicas_c.h:26
func IndexReplicasOwnFields(Arg0 *FaissIndexReplicas) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasSetOwnFields function as declared in c_api/IndexReplicas_c.h:26
func IndexReplicasSetOwnFields(Arg0 *FaissIndexReplicas, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexReplicas_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexReplicasNew function as declared in c_api/IndexReplicas_c.h:28
func IndexReplicasNew(PIndex **FaissIndexReplicas, D int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexReplicas)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_new(cPIndex, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasNewWithOptions function as declared in c_api/IndexReplicas_c.h:30
func IndexReplicasNewWithOptions(PIndex **FaissIndexReplicas, D int32, Threaded int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexReplicas)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cThreaded, cThreadedAllocMap := (C.int)(Threaded), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_new_with_options(cPIndex, cD, cThreaded)
	runtime.KeepAlive(cThreadedAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasAddReplica function as declared in c_api/IndexReplicas_c.h:35
func IndexReplicasAddReplica(Index *FaissIndexReplicas, Replica *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cReplica, cReplicaAllocMap := (*C.FaissIndex)(unsafe.Pointer(Replica)), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_add_replica(cIndex, cReplica)
	runtime.KeepAlive(cReplicaAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasRemoveReplica function as declared in c_api/IndexReplicas_c.h:39
func IndexReplicasRemoveReplica(Index *FaissIndexReplicas, Replica *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cReplica, cReplicaAllocMap := (*C.FaissIndex)(unsafe.Pointer(Replica)), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_remove_replica(cIndex, cReplica)
	runtime.KeepAlive(cReplicaAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexReplicasAt function as declared in c_api/IndexReplicas_c.h:43
func IndexReplicasAt(Index *FaissIndexReplicas, I int32) *FaissIndex {
	cIndex, cIndexAllocMap := (*C.FaissIndexReplicas)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cI, cIAllocMap := (C.int)(I), cgoAllocsUnknown
	__ret := C.faiss_IndexReplicas_at(cIndex, cI)
	runtime.KeepAlive(cIAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexScalarQuantizerNew function as declared in c_api/IndexScalarQuantizer_c.h:37
func IndexScalarQuantizerNew(PIndex **FaissIndexScalarQuantizer) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexScalarQuantizer)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	__ret := C.faiss_IndexScalarQuantizer_new(cPIndex)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexScalarQuantizerNewWith function as declared in c_api/IndexScalarQuantizer_c.h:39
func IndexScalarQuantizerNewWith(PIndex **FaissIndexScalarQuantizer, D int32, Qt FaissQuantizerType, Metric FaissMetricType) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexScalarQuantizer)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cQt, cQtAllocMap := (C.FaissQuantizerType)(Qt), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_IndexScalarQuantizer_new_with(cPIndex, cD, cQt, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cQtAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexScalarQuantizerCast function as declared in c_api/IndexScalarQuantizer_c.h:45
func IndexScalarQuantizerCast(Arg0 *FaissIndex) *FaissIndexScalarQuantizer {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexScalarQuantizer_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexScalarQuantizer)(unsafe.Pointer(&__ret))
	return __v
}

// IndexScalarQuantizerFree function as declared in c_api/IndexScalarQuantizer_c.h:47
func IndexScalarQuantizerFree(Obj *FaissIndexScalarQuantizer) {
	cObj, cObjAllocMap := (*C.FaissIndexScalarQuantizer)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexScalarQuantizer_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexIVFScalarQuantizerCast function as declared in c_api/IndexScalarQuantizer_c.h:52
func IndexIVFScalarQuantizerCast(Arg0 *FaissIndex) *FaissIndexIVFScalarQuantizer {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIVFScalarQuantizer)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFScalarQuantizerFree function as declared in c_api/IndexScalarQuantizer_c.h:54
func IndexIVFScalarQuantizerFree(Obj *FaissIndexIVFScalarQuantizer) {
	cObj, cObjAllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexIVFScalarQuantizer_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexIVFScalarQuantizerNewWithMetric function as declared in c_api/IndexScalarQuantizer_c.h:65
func IndexIVFScalarQuantizerNewWithMetric(PIndex **FaissIndexIVFScalarQuantizer, Quantizer *FaissIndex, D uint32, Nlist uint32, Qt FaissQuantizerType, Metric FaissMetricType, EncodeResidual int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cQuantizer, cQuantizerAllocMap := (*C.FaissIndex)(unsafe.Pointer(Quantizer)), cgoAllocsUnknown
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cNlist, cNlistAllocMap := (C.size_t)(Nlist), cgoAllocsUnknown
	cQt, cQtAllocMap := (C.FaissQuantizerType)(Qt), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	cEncodeResidual, cEncodeResidualAllocMap := (C.int)(EncodeResidual), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_new_with_metric(cPIndex, cQuantizer, cD, cNlist, cQt, cMetric, cEncodeResidual)
	runtime.KeepAlive(cEncodeResidualAllocMap)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cQtAllocMap)
	runtime.KeepAlive(cNlistAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cQuantizerAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFScalarQuantizerNlist function as declared in c_api/IndexScalarQuantizer_c.h:75
func IndexIVFScalarQuantizerNlist(Arg0 *FaissIndexIVFScalarQuantizer) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_nlist(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFScalarQuantizerNprobe function as declared in c_api/IndexScalarQuantizer_c.h:77
func IndexIVFScalarQuantizerNprobe(Arg0 *FaissIndexIVFScalarQuantizer) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_nprobe(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// IndexIVFScalarQuantizerSetNprobe function as declared in c_api/IndexScalarQuantizer_c.h:77
func IndexIVFScalarQuantizerSetNprobe(Arg0 *FaissIndexIVFScalarQuantizer, Arg1 uint32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.size_t)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVFScalarQuantizer_set_nprobe(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFScalarQuantizerQuantizer function as declared in c_api/IndexScalarQuantizer_c.h:79
func IndexIVFScalarQuantizerQuantizer(Arg0 *FaissIndexIVFScalarQuantizer) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_quantizer(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIVFScalarQuantizerOwnFields function as declared in c_api/IndexScalarQuantizer_c.h:82
func IndexIVFScalarQuantizerOwnFields(Arg0 *FaissIndexIVFScalarQuantizer) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFScalarQuantizerSetOwnFields function as declared in c_api/IndexScalarQuantizer_c.h:82
func IndexIVFScalarQuantizerSetOwnFields(Arg0 *FaissIndexIVFScalarQuantizer, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIVFScalarQuantizer_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIVFScalarQuantizerAddCore function as declared in c_api/IndexScalarQuantizer_c.h:84
func IndexIVFScalarQuantizerAddCore(Index *FaissIndexIVFScalarQuantizer, N int32, X *float32, Xids *int32, PrecomputedIdx *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXids, cXidsAllocMap := (*C.idx_t)(unsafe.Pointer(Xids)), cgoAllocsUnknown
	cPrecomputedIdx, cPrecomputedIdxAllocMap := (*C.idx_t)(unsafe.Pointer(PrecomputedIdx)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_add_core(cIndex, cN, cX, cXids, cPrecomputedIdx)
	runtime.KeepAlive(cPrecomputedIdxAllocMap)
	runtime.KeepAlive(cXidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIVFScalarQuantizerTrainResidual function as declared in c_api/IndexScalarQuantizer_c.h:91
func IndexIVFScalarQuantizerTrainResidual(Index *FaissIndexIVFScalarQuantizer, N int32, X *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFScalarQuantizer)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFScalarQuantizer_train_residual(cIndex, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsFree function as declared in c_api/IndexShards_c.h:24
func IndexShardsFree(Obj *FaissIndexShards) {
	cObj, cObjAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexShards_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// IndexShardsOwnFields function as declared in c_api/IndexShards_c.h:26
func IndexShardsOwnFields(Arg0 *FaissIndexShards) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsSetOwnFields function as declared in c_api/IndexShards_c.h:26
func IndexShardsSetOwnFields(Arg0 *FaissIndexShards, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexShards_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexShardsSetSuccessiveIds function as declared in c_api/IndexShards_c.h:27
func IndexShardsSetSuccessiveIds(Arg0 *FaissIndexShards, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexShards_set_successive_ids(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexShardsSuccessiveIds function as declared in c_api/IndexShards_c.h:27
func IndexShardsSuccessiveIds(Arg0 *FaissIndexShards) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_successive_ids(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsNew function as declared in c_api/IndexShards_c.h:29
func IndexShardsNew(PIndex **FaissIndexShards, D int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexShards)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_new(cPIndex, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsNewWithOptions function as declared in c_api/IndexShards_c.h:31
func IndexShardsNewWithOptions(PIndex **FaissIndexShards, D int32, Threaded int32, SuccessiveIds int32) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexShards)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cThreaded, cThreadedAllocMap := (C.int)(Threaded), cgoAllocsUnknown
	cSuccessiveIds, cSuccessiveIdsAllocMap := (C.int)(SuccessiveIds), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_new_with_options(cPIndex, cD, cThreaded, cSuccessiveIds)
	runtime.KeepAlive(cSuccessiveIdsAllocMap)
	runtime.KeepAlive(cThreadedAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsAddShard function as declared in c_api/IndexShards_c.h:37
func IndexShardsAddShard(Index *FaissIndexShards, Shard *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cShard, cShardAllocMap := (*C.FaissIndex)(unsafe.Pointer(Shard)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_add_shard(cIndex, cShard)
	runtime.KeepAlive(cShardAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsRemoveShard function as declared in c_api/IndexShards_c.h:39
func IndexShardsRemoveShard(Index *FaissIndexShards, Shard *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cShard, cShardAllocMap := (*C.FaissIndex)(unsafe.Pointer(Shard)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_remove_shard(cIndex, cShard)
	runtime.KeepAlive(cShardAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexShardsAt function as declared in c_api/IndexShards_c.h:41
func IndexShardsAt(Index *FaissIndexShards, I int32) *FaissIndex {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cI, cIAllocMap := (C.int)(I), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_at(cIndex, cI)
	runtime.KeepAlive(cIAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIDMapOwnFields function as declared in c_api/MetaIndexes_c.h:24
func IndexIDMapOwnFields(Arg0 *FaissIndexIDMap) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIDMapSetOwnFields function as declared in c_api/MetaIndexes_c.h:24
func IndexIDMapSetOwnFields(Arg0 *FaissIndexIDMap, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIDMap_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIDMapNew function as declared in c_api/MetaIndexes_c.h:26
func IndexIDMapNew(PIndex **FaissIndexIDMap, Index *FaissIndex) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIDMap)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_new(cPIndex, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIDMapCast function as declared in c_api/MetaIndexes_c.h:34
func IndexIDMapCast(Arg0 *FaissIndex) *FaissIndexIDMap {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIDMap)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIDMapIdMap function as declared in c_api/MetaIndexes_c.h:44
func IndexIDMapIdMap(Index *FaissIndexIDMap, PIdMap **int32, PSize *uint32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cPIdMap, cPIdMapAllocMap := (**C.idx_t)(unsafe.Pointer(PIdMap)), cgoAllocsUnknown
	cPSize, cPSizeAllocMap := (*C.size_t)(unsafe.Pointer(PSize)), cgoAllocsUnknown
	C.faiss_IndexIDMap_id_map(cIndex, cPIdMap, cPSize)
	runtime.KeepAlive(cPSizeAllocMap)
	runtime.KeepAlive(cPIdMapAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// IndexIDMapSubIndex function as declared in c_api/MetaIndexes_c.h:55
func IndexIDMapSubIndex(Index *FaissIndexIDMap) *FaissIndex {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_sub_index(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIDMap2OwnFields function as declared in c_api/MetaIndexes_c.h:61
func IndexIDMap2OwnFields(Arg0 *FaissIndexIDMap2) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIDMap2SetOwnFields function as declared in c_api/MetaIndexes_c.h:61
func IndexIDMap2SetOwnFields(Arg0 *FaissIndexIDMap2, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIDMap2_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// IndexIDMap2New function as declared in c_api/MetaIndexes_c.h:63
func IndexIDMap2New(PIndex **FaissIndexIDMap2, Index *FaissIndex) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndexIDMap2)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_new(cPIndex, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIDMap2ConstructRevMap function as declared in c_api/MetaIndexes_c.h:66
func IndexIDMap2ConstructRevMap(Index *FaissIndexIDMap2) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_construct_rev_map(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// IndexIDMap2Cast function as declared in c_api/MetaIndexes_c.h:74
func IndexIDMap2Cast(Arg0 *FaissIndex) *FaissIndexIDMap2 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIDMap2)(unsafe.Pointer(&__ret))
	return __v
}

// IndexIDMap2IdMap function as declared in c_api/MetaIndexes_c.h:84
func IndexIDMap2IdMap(Index *FaissIndexIDMap2, PIdMap **int32, PSize *uint32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cPIdMap, cPIdMapAllocMap := (**C.idx_t)(unsafe.Pointer(PIdMap)), cgoAllocsUnknown
	cPSize, cPSizeAllocMap := (*C.size_t)(unsafe.Pointer(PSize)), cgoAllocsUnknown
	C.faiss_IndexIDMap2_id_map(cIndex, cPIdMap, cPSize)
	runtime.KeepAlive(cPSizeAllocMap)
	runtime.KeepAlive(cPIdMapAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// IndexIDMap2SubIndex function as declared in c_api/MetaIndexes_c.h:95
func IndexIDMap2SubIndex(Index *FaissIndexIDMap2) *FaissIndex {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_sub_index(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// CloneIndex function as declared in c_api/clone_index_c.h:26
func CloneIndex(Arg0 *FaissIndex, POut **FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cPOut, cPOutAllocMap := (**C.FaissIndex)(unsafe.Pointer(POut)), cgoAllocsUnknown
	__ret := C.faiss_clone_index(cArg0, cPOut)
	runtime.KeepAlive(cPOutAllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetLastError function as declared in c_api/error_c.h:36
func GetLastError() string {
	__ret := C.faiss_get_last_error()
	__v := packPCharString(__ret)
	return __v
}

// IndexFactory function as declared in c_api/index_factory_c.h:24
func IndexFactory(PIndex **FaissIndex, D int32, Description string, Metric FaissMetricType) int32 {
	cPIndex, cPIndexAllocMap := (**C.FaissIndex)(unsafe.Pointer(PIndex)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	Description = safeString(Description)
	cDescription, cDescriptionAllocMap := unpackPCharString(Description)
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_index_factory(cPIndex, cD, cDescription, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(Description)
	runtime.KeepAlive(cDescriptionAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cPIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// WriteIndexFname function as declared in c_api/index_io_c.h:32
func WriteIndexFname(Idx *FaissIndex, Fname string) int32 {
	cIdx, cIdxAllocMap := (*C.FaissIndex)(unsafe.Pointer(Idx)), cgoAllocsUnknown
	Fname = safeString(Fname)
	cFname, cFnameAllocMap := unpackPCharString(Fname)
	__ret := C.faiss_write_index_fname(cIdx, cFname)
	runtime.KeepAlive(Fname)
	runtime.KeepAlive(cFnameAllocMap)
	runtime.KeepAlive(cIdxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReadIndexFname function as declared in c_api/index_io_c.h:45
func ReadIndexFname(Fname string, IoFlags int32, POut **FaissIndex) int32 {
	Fname = safeString(Fname)
	cFname, cFnameAllocMap := unpackPCharString(Fname)
	cIoFlags, cIoFlagsAllocMap := (C.int)(IoFlags), cgoAllocsUnknown
	cPOut, cPOutAllocMap := (**C.FaissIndex)(unsafe.Pointer(POut)), cgoAllocsUnknown
	__ret := C.faiss_read_index_fname(cFname, cIoFlags, cPOut)
	runtime.KeepAlive(cPOutAllocMap)
	runtime.KeepAlive(cIoFlagsAllocMap)
	runtime.KeepAlive(Fname)
	runtime.KeepAlive(cFnameAllocMap)
	__v := (int32)(__ret)
	return __v
}
